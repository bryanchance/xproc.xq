xquery version "1.0" encoding "UTF-8";

(: This file was generated on Fri Feb 12, 2016 10:51 (UTC+01) by REx v5.35 which is Copyright (c) 1979-2015 by Gunther Rademacher <grd@gmx.net> :)
(: REx command line: grammar.ebnf -tree -backtrack -xquery :)

(:~
 : The parser that was generated for the grammar grammar.
 :)
module namespace p="grammar";
declare default function namespace "http://www.w3.org/2005/xpath-functions";

(:~
 : The index of the parser state for accessing the combined
 : (i.e. level > 1) lookahead code.
 :)
declare variable $p:lk as xs:integer := 1;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the token that has been shifted.
 :)
declare variable $p:b0 as xs:integer := 2;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the token that has been shifted.
 :)
declare variable $p:e0 as xs:integer := 3;

(:~
 : The index of the parser state for accessing the code of the
 : level-1-lookahead token.
 :)
declare variable $p:l1 as xs:integer := 4;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-1-lookahead token.
 :)
declare variable $p:b1 as xs:integer := 5;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-1-lookahead token.
 :)
declare variable $p:e1 as xs:integer := 6;

(:~
 : The index of the parser state for accessing the code of the
 : level-2-lookahead token.
 :)
declare variable $p:l2 as xs:integer := 7;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-2-lookahead token.
 :)
declare variable $p:b2 as xs:integer := 8;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-2-lookahead token.
 :)
declare variable $p:e2 as xs:integer := 9;

(:~
 : The index of the parser state for accessing the code of the
 : level-3-lookahead token.
 :)
declare variable $p:l3 as xs:integer := 10;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-3-lookahead token.
 :)
declare variable $p:b3 as xs:integer := 11;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-3-lookahead token.
 :)
declare variable $p:e3 as xs:integer := 12;

(:~
 : The index of the parser state for accessing the token code that
 : was expected when an error was found.
 :)
declare variable $p:error as xs:integer := 13;

(:~
 : The index of the parser state that points to the first entry
 : used for collecting action results.
 :)
declare variable $p:result as xs:integer := 14;

(:~
 : The codepoint to charclass mapping for 7 bit codepoints.
 :)
declare variable $p:MAP0 as xs:integer+ :=
(
  61, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 25, 25,
  26, 25, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 6, 30, 6, 27, 6, 31, 32,
  33, 34, 35, 36, 37, 38, 39, 27, 27, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 27, 54, 55, 56, 6, 6
);

(:~
 : The codepoint to charclass mapping for codepoints below the surrogate block.
 :)
declare variable $p:MAP1 as xs:integer+ :=
(
  108, 124, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 156, 182, 193, 193, 193, 193, 226,
  227, 225, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
  226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
  226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
  226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 259, 273, 289, 305, 321, 359, 375,
  391, 413, 413, 413, 405, 343, 335, 343, 335, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
  343, 343, 430, 430, 430, 430, 430, 430, 430, 328, 343, 343, 343, 343, 343, 343, 343, 343, 450, 413, 413, 414, 412,
  413, 413, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 446, 413, 413,
  413, 413, 413, 413, 471, 413, 413, 413, 466, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413,
  413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 342, 343, 343, 343, 343,
  343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
  343, 343, 343, 343, 343, 413, 61, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22,
  23, 24, 25, 25, 25, 25, 26, 25, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 6, 27, 27, 27, 27, 27, 27, 27,
  27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 6, 30, 6, 27, 6, 31, 32, 33, 34,
  35, 36, 37, 38, 39, 27, 27, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 27, 54, 55, 56, 6, 6, 6, 6, 6, 6,
  6, 57, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
  57, 6, 6, 58, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 27, 27, 6, 6, 6, 6, 6, 6, 60, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  59, 6, 6, 6, 6
);

(:~
 : The codepoint to charclass mapping for codepoints above the surrogate block.
 :)
declare variable $p:MAP2 as xs:integer+ :=
(
  57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 6, 27, 6, 27, 27, 6
);

(:~
 : The token-set-id to DFA-initial-state mapping.
 :)
declare variable $p:INITIAL as xs:integer+ :=
(
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
  33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
  62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78
);

(:~
 : The DFA transition table.
 :)
declare variable $p:TRANSITION as xs:integer+ :=
(
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 3975, 3968, 3975, 3975, 3976, 3992, 8876, 8877, 8877, 8877, 8877, 5684,
  9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8870, 8877, 4027, 4067,
  3992, 8876, 8877, 8877, 8877, 8877, 5684, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 6441, 6434, 6332, 4109, 4125, 4171, 8876, 8877, 8877, 8877, 8877, 9751, 9769, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8870, 8877, 8877, 8877, 3992, 8876, 8877, 8877, 8877,
  8877, 7082, 9769, 8877, 8877, 8877, 8877, 10592, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8579, 4732, 6058,
  4214, 4230, 3992, 8876, 8877, 8877, 8877, 8877, 5684, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8870, 8877, 8877, 8877, 3992, 8876, 8877, 8877, 8877, 8877, 5684, 9769, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8870, 8877, 8877, 8877, 4302, 8876, 8877,
  8877, 8877, 8877, 5715, 4975, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5114,
  5107, 6421, 4360, 4376, 4424, 8876, 8877, 8877, 8877, 8877, 4093, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 4466, 4476, 4455, 4492, 4508, 4548, 4563, 8877, 8877, 8877, 8877, 8423, 9769,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5814, 6071, 9059, 5813, 6084, 3992,
  4580, 8877, 8877, 8877, 8877, 4155, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 4967, 8870, 9214, 4652, 4598, 3992, 8876, 8877, 8877, 8877, 8877, 5684, 6714, 8877, 8877, 8877, 8877, 4011,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8870, 8877, 8877, 4638, 3992, 8876, 8877, 8877, 8877, 8877,
  5684, 9769, 8877, 5070, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 4343, 10605, 4582, 4344,
  4668, 3992, 8876, 8877, 8877, 8877, 8877, 5684, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8870, 8877, 8877, 4705, 4759, 4186, 4843, 8124, 8877, 4808, 8286, 5745, 10166, 4834, 8480,
  6173, 4051, 10163, 4852, 4390, 8877, 4877, 10167, 6162, 7348, 10153, 8258, 6169, 10160, 10739, 10735, 4904, 4941,
  4991, 5891, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8870, 8877, 7350, 5045, 4759, 4186, 4843,
  9090, 8877, 4808, 8286, 5745, 10166, 5011, 8480, 6173, 4051, 10163, 4852, 4390, 8877, 4877, 10167, 6162, 7348, 10153,
  8258, 6169, 10160, 10739, 10735, 4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8870, 8877, 5292, 5094, 3992, 8876, 4682, 8877, 8877, 8877, 5684, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 9185, 7245, 9182, 5116, 5132, 5171, 4186, 4843, 6586, 8877, 4808, 8286, 5745,
  10166, 5225, 8480, 4532, 4051, 10163, 9109, 4522, 5251, 5308, 10167, 6162, 10649, 5335, 8258, 6967, 5362, 10739,
  10735, 4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5155, 4081, 5384, 8877, 5599,
  5402, 5418, 5491, 5452, 8877, 10276, 5537, 5629, 8742, 5482, 6213, 5535, 8684, 8739, 5514, 4139, 8877, 7695, 8743,
  5524, 4152, 8729, 5498, 5531, 8736, 5436, 5432, 7706, 5466, 5462, 5553, 5563, 5579, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 6107, 8870, 4743, 8877, 6109, 3992, 8876, 8877, 8877, 8877, 8877, 5684, 9769, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8878, 8674, 8877, 8877, 8877, 5615, 6876, 8877, 6265, 6883, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8870, 8877, 8877, 5645, 3992, 8876, 8877, 8877, 5681,
  8877, 5684, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5665, 8870, 5712,
  5700, 5731, 5772, 8876, 8877, 8877, 5830, 8877, 5684, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8870, 8877, 10090, 5849, 3992, 4007, 8877, 9388, 9390, 8877, 5684, 9769, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 6345, 8877, 8877, 6203, 3992, 8876, 8877,
  8877, 8877, 8877, 5684, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8870, 4719, 9187, 5907, 3992, 8876, 8877, 8877, 8877, 8877, 5684, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523, 5977, 6007, 6044, 4759, 4186, 4843, 8124, 8877, 4808, 9829, 5863,
  10166, 5011, 8480, 6173, 7670, 10163, 4852, 4390, 6100, 4877, 10167, 6162, 7684, 6125, 8258, 6967, 5362, 10739, 10735,
  4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523, 5977, 6007, 6044, 4759,
  4186, 4843, 10197, 8877, 4808, 9829, 5863, 10166, 6152, 8480, 6173, 7670, 10163, 4852, 4390, 6100, 4877, 10167, 6162,
  7684, 6125, 8258, 6967, 5362, 10739, 10735, 4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 5957, 8523, 5977, 6007, 6044, 4759, 4186, 4843, 8124, 8877, 4808, 9829, 5863, 10166, 5011, 8480, 6173, 7670,
  10163, 4852, 4390, 8877, 4877, 10167, 6162, 7348, 10153, 8258, 6169, 10160, 10739, 10735, 4888, 9342, 9338, 6658,
  9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 4041, 6189, 6229, 6245, 4759, 4186, 4843, 8124, 8877,
  4808, 9829, 5863, 10166, 5011, 8480, 6173, 7670, 10163, 4852, 4390, 8877, 4877, 10167, 6162, 7348, 10153, 8258, 6169,
  10160, 10739, 10735, 4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8870, 10660,
  6281, 4925, 3992, 8876, 8877, 8877, 8877, 8877, 5684, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 5961, 4270, 8877, 4278, 6318, 3992, 8876, 8877, 8877, 8877, 8877, 5684, 9769, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 6361, 8523, 6375, 6391, 6407, 6459, 4186, 6528,
  7543, 8877, 6516, 7895, 5863, 10166, 5011, 8480, 5235, 10635, 9100, 4852, 7589, 6100, 6544, 7502, 4622, 7684, 6125,
  8258, 9252, 6571, 10739, 7882, 4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957,
  8523, 5977, 6007, 6044, 4759, 4186, 4843, 8124, 8877, 4808, 9829, 5863, 10166, 5011, 8480, 6173, 7670, 10163, 4852,
  4390, 6100, 4877, 10167, 6162, 7684, 6622, 6650, 7232, 5362, 10739, 10735, 4888, 9342, 9338, 6018, 9023, 4332, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523, 5977, 6674, 6690, 4759, 4186, 4843, 8124, 8877, 4808, 9829, 5921,
  7395, 10400, 6730, 6173, 7670, 6758, 5029, 4390, 6100, 4877, 7442, 6162, 7684, 6746, 7640, 8510, 5362, 8082, 6774,
  4888, 9342, 9338, 6658, 9023, 6790, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 6817, 8523, 6830, 6846, 6862, 4759,
  4186, 4843, 8124, 6801, 6902, 9829, 5863, 6931, 6606, 9631, 8404, 7670, 10163, 4852, 4390, 6100, 4877, 10167, 6960,
  7684, 6125, 9301, 6967, 5362, 8039, 10735, 4888, 9342, 7764, 6983, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 5957, 7009, 5977, 7052, 7068, 7098, 5186, 5874, 7143, 5059, 7159, 8454, 7175, 5199, 7217, 7201, 8920, 7269,
  8224, 7319, 7335, 6100, 7366, 8818, 9245, 7684, 7382, 7411, 6967, 7435, 7458, 7824, 7488, 9342, 4818, 7518, 6993,
  4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523, 5977, 7559, 7575, 7605, 4774, 4843, 7621, 8877, 4808,
  10454, 5863, 10166, 5011, 8480, 6173, 7670, 10163, 4408, 4390, 6100, 4877, 10167, 6162, 7684, 6125, 8258, 6967, 5362,
  10739, 10735, 4888, 9342, 9338, 6658, 8946, 7190, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523, 5977, 6007,
  7656, 4759, 4186, 4843, 8124, 8877, 4808, 6915, 5863, 10166, 5011, 8480, 6173, 10721, 10163, 4852, 4390, 8877, 4877,
  10167, 6162, 7348, 10153, 8258, 6169, 10160, 10739, 10735, 6555, 9332, 9338, 6658, 9029, 4332, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 5957, 8523, 5977, 6007, 6044, 7722, 4186, 4843, 8907, 8877, 7738, 9829, 5863, 10166, 5011, 8480,
  6173, 7670, 10163, 4852, 4390, 8877, 4877, 10167, 6162, 7348, 10153, 8258, 6169, 10160, 10739, 10735, 4888, 9342,
  9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523, 7780, 7810, 7840, 4759, 4186, 4843,
  8124, 8418, 7911, 9829, 5863, 10166, 10319, 7954, 7998, 7854, 10163, 4852, 4390, 10691, 8055, 8069, 6162, 7348, 10153,
  8258, 6169, 10160, 7938, 9283, 4888, 9342, 6136, 6658, 9017, 5802, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957,
  8523, 5977, 8098, 8150, 8194, 7113, 8112, 8210, 8877, 8240, 6915, 5863, 10166, 10218, 8480, 6173, 10769, 10163, 8274,
  4612, 8877, 4877, 10167, 6162, 4918, 10153, 8258, 6169, 10160, 8344, 10735, 4888, 9342, 9338, 9569, 8302, 4332, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523, 5977, 8332, 8360, 4759, 4186, 4843, 8390, 8877, 4808, 7036, 5991,
  7531, 5011, 8480, 9151, 8374, 8774, 4852, 4390, 4564, 8439, 7925, 6162, 7348, 10153, 8258, 6169, 10160, 10739, 10735,
  4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 8470, 8496, 8549, 8565, 4759,
  6474, 4843, 8600, 10532, 8645, 8178, 5863, 10166, 5011, 8480, 6173, 8700, 10163, 4852, 4390, 8877, 4877, 10167, 7751,
  9529, 8759, 8803, 8858, 8894, 10739, 7868, 4198, 8316, 8134, 8936, 6028, 4956, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 5957, 8962, 8988, 9004, 9045, 4759, 4186, 9075, 8787, 8533, 9125, 9456, 5863, 8615, 5209, 8480, 6173, 7670,
  10163, 9141, 9167, 9203, 9230, 10167, 10783, 9705, 9268, 8258, 6169, 10160, 9317, 10735, 4888, 8026, 8842, 6658, 9023,
  5281, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523, 5977, 9358, 9374, 4759, 4317, 4399, 9406, 8877, 4808,
  9829, 9441, 5368, 9472, 9997, 9482, 8012, 6596, 4852, 4390, 9498, 9514, 10167, 5346, 4258, 9545, 9561, 6169, 10160,
  10739, 10735, 4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523, 5977, 6007,
  6044, 4759, 4186, 4843, 8124, 6259, 9585, 9644, 5863, 10166, 5011, 8480, 6173, 5266, 10163, 4852, 4390, 8877, 4877,
  10167, 6162, 7348, 10153, 8258, 6169, 10160, 10739, 10735, 4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 5957, 8523, 5977, 9601, 9617, 4759, 4186, 6634, 6944, 6302, 9660, 9676, 5863, 4787, 9692, 8480,
  6173, 7794, 5001, 4852, 4390, 8877, 4877, 7472, 10055, 7348, 10153, 5883, 6169, 10160, 10739, 7968, 4888, 9425, 9338,
  8830, 10246, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523, 5977, 9721, 9737, 9785, 4186, 4843, 8124,
  6500, 9801, 10357, 5863, 10166, 9817, 4244, 8660, 9845, 10163, 4852, 4390, 5941, 4877, 9861, 6162, 5935, 9877, 9893,
  9909, 9925, 10739, 10735, 4888, 9342, 9421, 9941, 7297, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 9987,
  5977, 9957, 9973, 4759, 4439, 4861, 8629, 5146, 10013, 9829, 10029, 7634, 5011, 10562, 8715, 7670, 10208, 10045, 7024,
  8877, 10071, 7283, 10410, 10087, 10106, 10122, 10138, 10183, 10801, 10797, 5319, 7982, 9338, 7419, 10234, 6489, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523, 5977, 6007, 10262, 4759, 5787, 5020, 8124, 8877, 10292, 9829, 5863,
  10166, 5011, 8480, 10329, 8164, 10308, 10345, 4390, 4689, 10373, 8254, 6162, 7348, 10153, 8258, 6169, 10389, 10739,
  10735, 4888, 9342, 9338, 6658, 7303, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 6704, 5977, 6007, 6044,
  4759, 4186, 4843, 8124, 8877, 4808, 9829, 5863, 10166, 5011, 10426, 6173, 7670, 10163, 4852, 10442, 8877, 4877, 10167,
  6162, 7348, 10153, 8258, 6169, 10160, 10739, 10735, 4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 5957, 8523, 5977, 6007, 6044, 4759, 4186, 4843, 8124, 8877, 4808, 9829, 5863, 10166, 5011, 8480, 6173,
  7670, 10163, 4852, 4390, 8877, 4877, 10167, 6162, 7348, 10153, 4792, 6169, 10160, 10739, 10735, 4888, 9342, 9338,
  6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523, 5977, 10470, 6044, 4759, 4186, 4843, 8124,
  5659, 10486, 9829, 5863, 7127, 5011, 8972, 5756, 7670, 10163, 4852, 4390, 6443, 10502, 10167, 6162, 7348, 10153, 8258,
  6169, 10160, 10739, 10735, 4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 5957, 8523,
  5977, 6007, 6044, 4759, 4186, 4843, 8124, 8877, 4808, 9829, 5863, 10166, 5011, 8480, 6173, 7670, 10163, 4852, 4390,
  8877, 4877, 9297, 6162, 7348, 10153, 8258, 6169, 10160, 10739, 10735, 4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 6295, 5590, 10518, 10548, 3992, 9765, 8877, 8877, 8877, 8877, 6886, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8870, 8877, 8877, 10578, 3992, 8876,
  8877, 8877, 5386, 8877, 5684, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8870, 8877, 10621, 8877, 3992, 8876, 8877, 8877, 8877, 8877, 5833, 5078, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8870, 8877, 8877, 8877, 4759, 4186, 4843, 8124, 8877, 4808, 8286,
  5745, 10166, 5011, 8480, 6173, 4051, 10163, 4852, 4390, 8877, 4877, 10167, 6162, 7348, 10153, 8258, 6169, 10160,
  10739, 10735, 4888, 9342, 9338, 6658, 9023, 4332, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8870, 10688, 10676,
  7253, 3992, 8876, 8877, 8877, 8877, 8877, 5684, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8870, 8877, 8584, 8877, 3992, 8876, 8877, 8877, 8877, 8877, 5684, 9769, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8870, 8877, 10707, 4286, 3992, 8876, 8877, 8877,
  8877, 8877, 5684, 9769, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 10755, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
  8877, 8877, 8877, 8877, 8877, 9295, 9295, 9295, 9295, 9295, 9295, 95, 9295, 9295, 9295, 9295, 9295, 9295, 9295, 9295,
  9295, 9295, 9295, 9295, 9295, 9295, 9295, 9295, 0, 0, 82, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 95, 0, 0, 35840, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 0, 0, 13312, 0, 0, 0, 0, 0, 0, 13312, 0, 0, 0, 0, 0, 13312, 0, 0, 0, 0, 0,
  0, 95, 8277, 0, 8290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8277, 8277, 12572, 0, 0, 8302, 8302, 145, 145, 0, 145, 0, 0, 145, 0,
  145, 145, 13312, 13457, 13457, 13457, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0,
  95, 95, 192, 0, 82, 82, 82, 82, 82, 0, 0, 82, 0, 82, 0, 82, 82, 82, 82, 0, 0, 82, 0, 82, 82, 0, 82, 0, 0, 82, 0, 0,
  82, 0, 0, 0, 0, 0, 0, 202, 0, 202, 202, 202, 202, 202, 202, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 192,
  0, 5300, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 95, 8277, 0, 0, 0, 0, 0, 0, 8277, 8277, 8277, 8277, 0, 8302, 8302,
  8302, 8722, 8277, 8277, 8277, 8725, 8302, 8727, 8302, 8302, 0, 8302, 8730, 0, 15360, 15360, 15360, 15360, 15360, 0, 0,
  15360, 0, 15360, 0, 15360, 15360, 15360, 15360, 0, 0, 15360, 0, 15360, 15360, 0, 15360, 0, 0, 15360, 0, 0, 15360, 0,
  0, 0, 0, 0, 0, 324, 0, 326, 8302, 8302, 328, 8302, 8521, 8302, 8302, 0, 0, 0, 0, 0, 459, 0, 0, 0, 414, 0, 0, 0, 0, 0,
  0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 43008, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111616, 111616, 111616, 0, 0, 0, 0, 181, 182, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 95, 8277, 0, 0, 0, 0, 0, 0, 8277, 8277, 8277, 8392, 0, 8302, 8302, 8302, 8277, 8302,
  8302, 8277, 8302, 8277, 8302, 8277, 8302, 8277, 0, 0, 0, 0, 0, 0, 0, 0, 21504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 83, 83,
  83, 83, 0, 0, 83, 0, 83, 0, 83, 83, 83, 83, 0, 0, 83, 0, 83, 83, 0, 83, 0, 0, 83, 0, 0, 83, 0, 0, 0, 0, 0, 0, 8302, 0,
  8302, 8302, 8302, 8302, 8302, 8302, 8302, 0, 8392, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 0, 8302, 8302,
  8302, 8302, 8302, 8302, 95342, 0, 0, 82, 5303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 95, 8277, 0, 0, 0, 0, 0, 0, 8277,
  8277, 8391, 8277, 0, 8302, 8302, 8396, 80, 80, 80, 80, 80, 16464, 80, 80, 80, 80, 16464, 80, 80, 80, 80, 80, 16464,
  80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 96, 80, 80, 80, 80, 16464, 80, 80, 80, 80, 80, 16464, 16464, 16464, 16464,
  16464, 80, 80, 16464, 16464, 16464, 16464, 16464, 16464, 16464, 16464, 80, 80, 16464, 80, 16464, 16464, 80, 16464, 80,
  80, 16464, 80, 16464, 16464, 0, 0, 0, 0, 0, 0, 8302, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8302, 336, 0, 0, 0, 342,
  0, 0, 0, 8462, 0, 0, 0, 82, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141502, 141502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 412, 27648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21504, 21504, 19456, 19456, 12397, 19456, 12397,
  12397, 19456, 12397, 19456, 19456, 12397, 19456, 19456, 12397, 0, 0, 0, 0, 0, 0, 8588, 0, 8302, 8302, 8302, 8302,
  8302, 8302, 8302, 0, 0, 0, 451, 0, 452, 8645, 8646, 8302, 8648, 8302, 20480, 20480, 20480, 20480, 20480, 20480, 20480,
  20480, 20480, 20480, 0, 20480, 20480, 20480, 0, 0, 0, 0, 0, 0, 12397, 0, 0, 0, 0, 19456, 0, 0, 12397, 12397, 21504,
  21504, 0, 21504, 0, 0, 21504, 0, 21504, 21504, 21504, 21504, 21504, 21504, 0, 0, 0, 0, 0, 0, 26624, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 407, 0, 0, 0, 0, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 0, 22528, 22528,
  22528, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 40960, 40960, 0, 0, 0, 0, 0, 0, 95, 0, 15360, 0, 15360, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 30720, 0, 0, 0, 0, 30720, 30720, 0, 82, 83, 7252, 8277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 95, 8277, 0, 0, 0, 0,
  0, 0, 69717, 8277, 8277, 8277, 0, 8302, 8302, 8302, 8277, 8488, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277,
  8277, 8277, 8302, 8302, 8677, 8302, 8302, 0, 0, 0, 8302, 8302, 0, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8302, 8302,
  8302, 8277, 8277, 8277, 8302, 8302, 8302, 8302, 59502, 8302, 8302, 8277, 8277, 8277, 8277, 8277, 8277, 0, 312, 8302,
  8302, 8302, 8302, 8302, 8302, 8302, 0, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 0, 8302, 8302, 8302,
  8302, 8302, 8302, 8302, 0, 8277, 8406, 8277, 8277, 8277, 8410, 8277, 8277, 8277, 0, 0, 6499, 0, 0, 0, 0, 8277, 0, 0,
  0, 0, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8277, 8302, 8302, 8302, 8302, 0, 8302, 8302, 0, 8302, 8720, 8302,
  8302, 8277, 8723, 8277, 8277, 8726, 8302, 8302, 8302, 0, 8302, 8302, 0, 0, 0, 0, 458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  41984, 41984, 0, 0, 0, 8731, 8302, 8277, 8734, 8277, 8302, 8302, 8738, 8739, 8302, 8302, 8742, 8277, 8277, 8745, 8302,
  8277, 8302, 8302, 8277, 8302, 8277, 8302, 8277, 93294, 93269, 0, 0, 0, 0, 0, 0, 0, 19456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 285, 0, 0, 0, 0, 0, 8747, 8302, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8756, 8302, 8302, 8302, 8302, 8302, 8302,
  8277, 8277, 8565, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 0, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8302, 0, 8404,
  8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 0, 8302, 8302, 8578, 8302, 8302, 8581, 8302, 0, 0, 0, 23689, 0, 23689,
  23689, 0, 23689, 0, 0, 23689, 0, 0, 23689, 0, 0, 0, 0, 0, 0, 66560, 0, 76800, 0, 83968, 0, 0, 0, 0, 0, 0, 0, 312, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 286, 0, 0, 0, 0, 0, 0, 0, 25719, 0, 25719, 25719, 0, 25719, 0, 0, 0, 25719, 25719, 0, 0, 0,
  0, 0, 0, 95, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2186, 2186, 0, 0, 2186, 0, 2186, 2186, 0, 2186, 0, 0,
  2186, 0, 0, 2186, 0, 0, 0, 0, 0, 0, 67584, 0, 78848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 87, 0, 0, 0, 0, 0, 2129, 82, 83,
  7252, 8277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 95, 8277, 0, 0, 0, 0, 196, 197, 8277, 8390, 8277, 8277, 0, 8302, 8302,
  8302, 8277, 8277, 8277, 8277, 8277, 8492, 8493, 8277, 8277, 8277, 8277, 8277, 8277, 0, 0, 8302, 8302, 8302, 8302,
  8302, 8485, 8302, 0, 8277, 8277, 8277, 8277, 8277, 8277, 3303, 4408, 8302, 8302, 8302, 8302, 8302, 8302, 8302, 0, 0,
  0, 0, 0, 0, 0, 0, 8462, 348, 0, 403, 0, 0, 0, 0, 342, 405, 0, 0, 0, 0, 0, 0, 0, 410, 0, 0, 0, 354, 6499, 0, 0, 0, 0,
  8277, 8277, 12572, 364, 6499, 8302, 8302, 8277, 8302, 8302, 8277, 8302, 8277, 8794, 8795, 8302, 8277, 0, 0, 0, 0, 0,
  0, 0, 25719, 0, 0, 0, 0, 0, 0, 0, 25719, 0, 0, 6499, 0, 0, 0, 0, 8277, 421, 0, 0, 0, 8302, 8302, 8302, 8302, 8277,
  8277, 8277, 8277, 8302, 8302, 8302, 8302, 73728, 73838, 8302, 0, 0, 0, 8277, 421, 466, 0, 0, 0, 0, 8302, 8302, 8302,
  8302, 8302, 8302, 449, 0, 0, 0, 0, 0, 8302, 8302, 8647, 8302, 8302, 0, 466, 0, 8302, 8302, 8302, 8302, 8302, 8302,
  8277, 8277, 8277, 8277, 8277, 8277, 8277, 79957, 8277, 8277, 8277, 8277, 8277, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 107520, 0, 0, 82, 83, 0, 184, 28672, 0, 0, 0, 0, 0, 0, 0, 0, 141503, 17408, 141503, 184, 0, 0, 0, 0, 0, 0,
  184, 184, 184, 184, 201, 202, 202, 202, 184, 184, 184, 184, 202, 202, 202, 202, 0, 0, 0, 202, 202, 202, 202, 0, 202,
  202, 184, 184, 184, 184, 0, 184, 184, 184, 0, 0, 202, 202, 202, 202, 202, 202, 184, 184, 184, 202, 202, 202, 202, 202,
  202, 202, 184, 184, 184, 202, 184, 184, 184, 184, 184, 184, 0, 0, 202, 202, 202, 202, 202, 202, 202, 0, 184, 184, 184,
  184, 184, 184, 184, 184, 184, 184, 184, 202, 202, 202, 202, 202, 184, 184, 184, 184, 184, 184, 184, 0, 202, 202, 202,
  202, 202, 202, 202, 0, 0, 0, 0, 0, 0, 202, 202, 202, 202, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141503, 192, 184, 184,
  184, 202, 202, 202, 202, 202, 202, 184, 184, 202, 202, 202, 202, 202, 184, 202, 202, 202, 202, 202, 184, 202, 202,
  202, 202, 184, 202, 202, 184, 202, 184, 202, 184, 202, 184, 0, 0, 0, 0, 0, 0, 0, 0, 105472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  87, 0, 0, 0, 0, 0, 17408, 0, 0, 82, 0, 83, 0, 0, 0, 0, 192, 0, 0, 0, 192, 0, 0, 0, 0, 0, 184, 184, 184, 0, 0, 203,
  202, 202, 202, 202, 202, 31890, 31890, 0, 31890, 0, 0, 31890, 0, 31890, 31890, 0, 31890, 31890, 31890, 0, 0, 0, 0, 0,
  242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34816, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 95,
  192, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 95, 276, 34816,
  34816, 0, 34816, 0, 0, 34816, 0, 34816, 34816, 100, 34916, 34916, 34816, 0, 0, 0, 0, 0, 8277, 8277, 8277, 0, 0, 203,
  8302, 8302, 8302, 8302, 8302, 337, 0, 0, 0, 343, 0, 0, 0, 8462, 0, 0, 0, 82, 83, 0, 0, 0, 29696, 0, 0, 0, 0, 0, 0, 0,
  95, 95, 8277, 0, 0, 0, 195, 0, 0, 8277, 8277, 8277, 8277, 0, 8302, 8302, 8302, 8277, 8302, 8302, 8277, 8792, 8793,
  8302, 8277, 8302, 8277, 0, 0, 0, 0, 0, 0, 0, 18432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14336, 33792, 37888, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 95, 95, 277, 37011, 37011, 0, 37011, 0, 0, 37011, 0, 37011, 37011, 0, 37011, 37011, 37011, 0, 0,
  0, 0, 0, 8277, 8277, 8277, 12572, 8462, 203, 8302, 8302, 8302, 8302, 8302, 8403, 0, 8277, 8277, 8277, 8277, 8277,
  8277, 8277, 8277, 8277, 8673, 8277, 8277, 8277, 8302, 8302, 8302, 8302, 8302, 8302, 8277, 8277, 8302, 8771, 8302,
  8302, 8302, 0, 0, 40960, 0, 40960, 40960, 0, 40960, 0, 0, 40960, 0, 0, 40960, 0, 0, 0, 0, 0, 8277, 8277, 8277, 12572,
  8462, 203, 8302, 8302, 8481, 8302, 8302, 0, 340, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 408, 0, 0, 0, 0, 0, 7252,
  8277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43008, 0, 0, 0, 0, 0, 8277, 7252, 0, 0, 8277, 8277, 0, 8277, 8277, 0,
  8277, 0, 0, 0, 0, 0, 8277, 8277, 8277, 12572, 8462, 203, 8302, 8480, 8302, 8302, 8483, 0, 8277, 8277, 8277, 8277,
  8277, 8302, 0, 8277, 8277, 8277, 8277, 8277, 8277, 8302, 8302, 8766, 8767, 8302, 8302, 8277, 8277, 8302, 8302, 8302,
  8302, 8302, 8277, 8302, 8302, 8783, 8784, 8302, 8277, 8302, 8302, 8302, 0, 0, 8302, 0, 8302, 8302, 0, 8302, 0, 0,
  8302, 0, 0, 8302, 0, 0, 0, 0, 0, 15360, 15360, 0, 0, 0, 15360, 15360, 15360, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 18432, 0,
  18432, 18432, 18432, 0, 18432, 18432, 0, 18432, 18432, 18432, 18432, 18432, 18432, 18432, 18432, 0, 0, 403, 0, 0, 0,
  0, 0, 405, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8277, 0, 466, 0, 0, 0, 0, 8302, 8302,
  8302, 8302, 8302, 8302, 8752, 8277, 8277, 8755, 8302, 8302, 8758, 8759, 8302, 8302, 8302, 8277, 8277, 8277, 8277,
  8277, 8277, 232, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8302, 0, 0, 0, 0, 0, 0, 8302, 8302, 8302, 8302, 8302, 0, 0, 0,
  0, 0, 0, 0, 0, 8462, 0, 0, 0, 0, 0, 8290, 7252, 0, 0, 8290, 8277, 0, 8277, 8277, 0, 8290, 0, 0, 0, 0, 0, 39936, 0,
  39936, 39936, 39936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 202, 0, 202, 202, 202, 202, 0, 8277, 8277, 8277, 8277, 8277,
  8303, 0, 8277, 8290, 8277, 8290, 8277, 8277, 8303, 8303, 0, 0, 8303, 0, 8303, 8303, 0, 8303, 0, 0, 8303, 0, 0, 8303,
  0, 0, 0, 0, 0, 62464, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 41984, 41984, 41984, 41984, 41984, 0, 0,
  41984, 0, 41984, 0, 41984, 41984, 0, 0, 0, 0, 0, 105472, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88064, 0, 0, 0, 0,
  43008, 43008, 0, 43008, 0, 0, 43008, 0, 43008, 43008, 43008, 43008, 43008, 43008, 0, 0, 0, 0, 82, 82, 82, 0, 0, 0, 82,
  82, 82, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 39936, 0, 0, 0, 0, 7252, 8277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
  8277, 7252, 0, 0, 8277, 8277, 0, 8277, 8277, 0, 8277, 0, 88, 0, 8277, 8277, 8277, 8277, 8277, 8304, 0, 8277, 8313,
  8277, 8313, 8277, 8277, 8331, 8331, 148, 148, 8331, 148, 8331, 8331, 148, 8331, 148, 148, 8331, 148, 148, 8360, 0, 0,
  0, 0, 83, 83, 83, 0, 0, 0, 83, 83, 83, 0, 0, 0, 0, 0, 0, 95, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 411, 0,
  0, 82, 83, 7252, 8277, 0, 0, 0, 0, 0, 187, 0, 0, 0, 95, 95, 8277, 0, 0, 194, 0, 0, 0, 8277, 8277, 8277, 8277, 0, 8302,
  8302, 8302, 8277, 8302, 8790, 8791, 8302, 8277, 8302, 8277, 8302, 8277, 0, 0, 0, 0, 0, 0, 0, 74752, 0, 0, 0, 0, 0, 0,
  0, 74752, 0, 249, 0, 8302, 8302, 252, 0, 8302, 8446, 8302, 8302, 8302, 8302, 8302, 8302, 8400, 8302, 8302, 0, 8277,
  8277, 8277, 8277, 8277, 8277, 8411, 8412, 8277, 0, 0, 6499, 0, 0, 0, 419, 8277, 0, 0, 0, 0, 8302, 8302, 8302, 8302,
  8277, 8277, 8277, 8277, 8302, 8302, 65048, 91673, 0, 8302, 8302, 0, 466, 0, 8302, 8302, 8302, 8302, 8689, 8302, 8277,
  8277, 8277, 8277, 8277, 8693, 8277, 8277, 8277, 8277, 0, 8277, 8277, 8277, 3303, 2186, 8302, 8302, 8302, 8302, 8302,
  8302, 8563, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 0, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8302,
  46080, 0, 0, 0, 8277, 0, 466, 0, 0, 0, 0, 8660, 8302, 8302, 8302, 8302, 8302, 8402, 8302, 0, 8277, 8405, 8277, 8277,
  8277, 8277, 8277, 8277, 8414, 8277, 8667, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8302, 8302, 8302,
  8302, 8302, 8302, 8277, 8277, 8302, 8302, 8302, 8302, 8302, 0, 8277, 8277, 8277, 8277, 8277, 8305, 0, 8277, 8314,
  8277, 8314, 8277, 8277, 8332, 8332, 0, 0, 8332, 0, 8332, 8332, 162, 8332, 162, 0, 8332, 166, 166, 8361, 0, 0, 0, 0,
  94, 0, 95, 8277, 0, 8277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 203, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 8302,
  8302, 0, 8505, 8302, 8302, 8522, 0, 0, 465, 8277, 0, 466, 0, 0, 0, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8562, 8302,
  8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8570, 8708, 8302, 8277, 8277, 8712, 8277, 8302, 8302, 8302,
  8302, 526, 0, 0, 8302, 8302, 8719, 8788, 8789, 8302, 8302, 8277, 8302, 8277, 8302, 8277, 8302, 8277, 0, 0, 0, 0, 0, 0,
  0, 243, 0, 0, 0, 0, 0, 0, 0, 243, 0, 0, 7252, 8277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 8277, 7252, 0, 0, 8277, 8277,
  0, 8277, 8277, 0, 8277, 0, 0, 0, 8277, 8277, 8277, 8277, 8277, 8306, 0, 8277, 8315, 8322, 8315, 8322, 8277, 8333,
  8333, 149, 149, 8333, 149, 8333, 8333, 149, 8333, 149, 149, 8333, 149, 149, 8362, 0, 0, 0, 0, 203, 0, 0, 0, 203, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 95, 0, 0, 0, 0, 8302, 8302, 0, 0, 8302, 8302, 8302, 8302, 8302, 8449, 8302,
  8302, 8302, 0, 264, 268, 0, 8462, 0, 0, 0, 0, 0, 95, 95, 192, 8484, 8302, 8302, 8277, 8277, 8277, 8277, 8277, 8277,
  8277, 8277, 8277, 8495, 8277, 8277, 8277, 8277, 0, 8277, 8277, 8277, 0, 0, 8302, 8302, 8302, 8302, 8430, 8302, 52334,
  8302, 8302, 8302, 8302, 0, 0, 0, 0, 0, 0, 8302, 8302, 8302, 8302, 8302, 0, 0, 0, 461, 0, 0, 0, 8277, 8762, 8277, 8302,
  8302, 8302, 8302, 8302, 8302, 8277, 8277, 8302, 8302, 8302, 8302, 8302, 8277, 8302, 8782, 8302, 8302, 8302, 8277,
  8302, 8302, 8302, 90, 0, 0, 0, 0, 0, 95, 8277, 0, 8277, 0, 0, 0, 0, 99, 0, 0, 0, 393, 0, 395, 8302, 50571, 50573,
  8302, 8302, 8591, 8302, 8302, 8302, 0, 0, 0, 0, 8462, 0, 0, 273, 0, 0, 95, 95, 192, 0, 8277, 8277, 8277, 8277, 8277,
  8307, 0, 8277, 8316, 8277, 8316, 8277, 8326, 8307, 8307, 150, 150, 8307, 150, 8307, 8307, 150, 8307, 150, 150, 8307,
  150, 150, 8363, 0, 0, 0, 0, 262, 266, 0, 0, 0, 0, 0, 0, 0, 95, 95, 192, 0, 82, 83, 7252, 8277, 0, 0, 0, 185, 0, 0, 0,
  0, 189, 95, 95, 8277, 193, 0, 0, 0, 0, 0, 8277, 8277, 8277, 8277, 0, 8302, 8302, 8302, 8486, 8277, 8277, 8277, 8277,
  8277, 8277, 8277, 8277, 8277, 8277, 8277, 8497, 8277, 8415, 8416, 8277, 8277, 0, 8277, 8421, 8422, 0, 232, 8302, 8302,
  8427, 8302, 8302, 8431, 0, 0, 0, 8442, 8443, 0, 197, 8302, 8302, 8427, 8302, 66670, 8302, 76910, 8302, 84078, 278, 0,
  0, 0, 97280, 8277, 8474, 8277, 12572, 8462, 203, 8302, 8302, 8302, 8482, 8302, 8277, 57454, 8302, 8277, 8302, 8277,
  8302, 8277, 8302, 8277, 0, 0, 0, 0, 0, 0, 0, 325, 0, 8302, 97390, 0, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8277,
  8277, 97365, 232, 0, 8302, 8302, 8302, 8302, 8302, 8510, 8302, 0, 0, 0, 489, 8302, 8683, 8302, 8302, 8302, 0, 0, 0,
  461, 0, 0, 0, 0, 0, 0, 95, 2129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109568, 109568, 109568, 0, 0, 0, 349, 0, 0, 0, 6499, 0,
  0, 0, 0, 8277, 8277, 12572, 0, 6499, 8302, 8302, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8634,
  8277, 8277, 8302, 8777, 8302, 8302, 8302, 8277, 8302, 8302, 8302, 8302, 8302, 8277, 8302, 8302, 8302, 8302, 8785,
  8786, 8302, 8302, 8302, 8277, 8277, 8277, 8277, 8277, 61525, 8277, 0, 8576, 8302, 8302, 8302, 8580, 8302, 8302, 390,
  0, 391, 0, 0, 0, 0, 8302, 0, 8302, 8590, 8302, 8302, 8592, 8302, 8302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  23689, 23689, 0, 0, 6499, 416, 0, 0, 0, 8277, 0, 0, 0, 0, 8302, 8620, 8302, 8622, 0, 0, 0, 8277, 0, 466, 0, 0, 0, 0,
  8302, 8302, 8662, 8302, 8302, 8302, 8277, 8277, 8277, 8277, 8491, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8498,
  8277, 8277, 8277, 8669, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8302, 8302, 8302, 8302, 8302, 8302, 8277, 8277,
  8302, 8302, 8302, 8302, 8774, 94208, 466, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8277, 8277, 8277,
  8277, 8277, 8277, 8277, 8277, 104533, 8277, 8302, 54357, 94293, 8302, 8302, 8302, 8302, 507, 0, 0, 94318, 8302, 8302,
  8704, 0, 8302, 8302, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8633, 8277, 8277, 8277, 8302, 81920, 49262,
  8302, 8721, 8302, 49237, 8277, 8724, 8277, 8302, 8302, 8302, 8302, 0, 8302, 8302, 8277, 8277, 8277, 8277, 8277, 8277,
  8277, 8277, 8632, 8277, 8277, 8277, 8635, 8302, 59477, 8277, 8277, 8302, 8302, 8302, 8302, 83054, 8302, 83029, 8277,
  8770, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8490, 8277, 8277, 8277, 8277, 8494, 8277, 8277, 8277, 8277, 0, 8277,
  8277, 8277, 0, 0, 8302, 8302, 8302, 8302, 8429, 8302, 0, 8277, 8277, 8277, 8277, 8277, 8302, 0, 8277, 8277, 8277,
  8277, 8277, 8277, 8334, 8334, 0, 0, 8334, 0, 8334, 8334, 0, 8334, 0, 0, 8334, 0, 0, 8334, 0, 0, 0, 0, 394, 0, 8302, 0,
  8302, 8302, 8302, 8302, 8302, 8593, 8302, 0, 0, 82, 83, 7252, 8277, 0, 0, 0, 0, 0, 0, 86016, 0, 0, 95, 95, 8277, 8277,
  69717, 8277, 0, 8277, 8277, 8277, 0, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8487, 8277, 8489, 8277, 8277, 8277, 8277,
  8277, 8277, 8277, 8277, 8277, 8277, 8674, 8302, 8302, 8302, 8302, 8302, 151, 151, 8302, 151, 8302, 8302, 151, 8302,
  151, 151, 8302, 151, 151, 8364, 0, 0, 0, 0, 6499, 0, 0, 0, 0, 8277, 8277, 12572, 0, 6499, 8302, 8302, 403, 0, 405, 0,
  0, 0, 0, 0, 461, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0, 0, 0, 202, 202, 202, 202, 184, 184, 184, 184, 202, 202, 202, 202, 0,
  202, 202, 0, 82, 83, 7252, 8277, 0, 0, 0, 0, 0, 0, 0, 188, 0, 95, 95, 0, 0, 0, 8302, 8302, 0, 0, 8302, 8426, 8302,
  8302, 8302, 8302, 8302, 8302, 8302, 8639, 8302, 0, 0, 102400, 0, 0, 0, 8302, 8302, 8302, 8302, 8302, 8750, 8302, 8302,
  8753, 8277, 8277, 8302, 8302, 8302, 8302, 8302, 8760, 8302, 0, 0, 0, 8277, 7252, 0, 0, 8277, 8277, 101, 8277, 8277, 0,
  8277, 0, 0, 0, 0, 6499, 0, 0, 0, 0, 8277, 8277, 12572, 0, 6499, 8557, 8302, 0, 8297, 8297, 8297, 8297, 8297, 8302, 0,
  8297, 8317, 8323, 8317, 8323, 8297, 8302, 8302, 8277, 8277, 8277, 8277, 8302, 8302, 8302, 8302, 0, 72704, 51200,
  51310, 72814, 8302, 152, 160, 8302, 160, 8302, 8302, 160, 8302, 160, 160, 8302, 160, 160, 8365, 0, 0, 0, 0, 6499, 0,
  0, 0, 0, 8277, 8552, 12572, 0, 6499, 8302, 8302, 8277, 8277, 8277, 8277, 8302, 8302, 8716, 8717, 0, 0, 0, 8302, 8302,
  8302, 8277, 8277, 8277, 8277, 8302, 8715, 8302, 8302, 0, 0, 0, 8302, 8302, 8302, 0, 263, 267, 0, 8462, 0, 0, 0, 0, 0,
  95, 95, 192, 0, 0, 0, 8302, 8302, 0, 0, 8302, 8302, 8447, 8302, 8302, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8277,
  8628, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8302, 8302, 8697, 8698, 0, 0, 0, 8302, 8302, 8302, 8302, 0,
  8302, 8302, 0, 0, 321, 0, 0, 323, 0, 0, 0, 8302, 8302, 0, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8277, 44554, 8302,
  8302, 8302, 0, 0, 0, 8302, 8302, 8302, 8277, 8277, 8277, 8302, 56865, 8302, 8302, 8302, 8302, 8302, 8277, 8277, 8277,
  8302, 8523, 8302, 8302, 8302, 8527, 0, 0, 0, 0, 0, 0, 0, 0, 8462, 0, 0, 0, 0, 6499, 0, 0, 358, 0, 96341, 8277, 12572,
  0, 6499, 8302, 8302, 8277, 8277, 8277, 8736, 8302, 8302, 8302, 8740, 8302, 8302, 8743, 8277, 8277, 8302, 8696, 8302,
  8302, 0, 0, 0, 8302, 8302, 8302, 8302, 0, 8302, 8302, 0, 0, 6499, 0, 0, 0, 0, 8277, 0, 0, 0, 0, 8619, 8302, 8302,
  8302, 8277, 8277, 8626, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8302, 8302, 8302, 8302, 0, 508, 0,
  8302, 8302, 8703, 8302, 513, 8302, 8302, 0, 8298, 8298, 8298, 8298, 8298, 8302, 0, 8298, 8277, 8298, 8277, 8298, 8298,
  8302, 8302, 8399, 8302, 8302, 8302, 0, 8277, 8277, 8277, 8277, 8409, 8277, 8277, 8277, 8277, 0, 8277, 8277, 8277, 0,
  0, 8302, 8302, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8302, 8302, 8302, 8302, 8302, 8302, 8761, 153, 153, 8302,
  153, 8302, 8302, 153, 8302, 153, 153, 8302, 153, 153, 8366, 0, 0, 0, 0, 6499, 0, 357, 0, 0, 8277, 8277, 12572, 0,
  6499, 8302, 8302, 8453, 0, 0, 0, 0, 8462, 0, 0, 0, 0, 0, 95, 95, 192, 0, 82, 83, 7252, 8277, 0, 0, 0, 0, 186, 0, 0, 0,
  0, 95, 95, 8277, 8277, 8277, 8277, 0, 8420, 8277, 8277, 0, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8561, 85102, 8302,
  8302, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8569, 85077, 8277, 0, 0, 0, 8302, 8302, 0, 0, 8302, 8302, 8302, 8399,
  8302, 8302, 8302, 8302, 8302, 8625, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8302,
  8302, 8302, 8302, 8302, 8277, 8571, 8277, 8277, 8277, 8277, 8575, 0, 8302, 8577, 8302, 8579, 8302, 8302, 8302, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 95, 95, 192, 8277, 8776, 8302, 8302, 8302, 8302, 8277, 8302, 8302, 8302, 8302, 8302, 8277,
  8787, 8302, 8302, 8733, 8277, 8277, 8302, 8302, 8302, 8302, 8302, 8741, 8302, 8277, 8744, 8277, 8302, 0, 8277, 8277,
  8277, 8277, 8277, 8302, 0, 8277, 8318, 8277, 8318, 8277, 8277, 8302, 8302, 8302, 8302, 0, 0, 509, 8302, 8702, 8302,
  8302, 0, 8302, 8302, 154, 154, 8302, 154, 8302, 8302, 154, 8302, 154, 154, 8302, 154, 154, 8367, 0, 0, 0, 0, 6499,
  356, 0, 0, 0, 8277, 8277, 12572, 0, 6499, 8302, 8558, 8277, 8277, 8417, 8277, 0, 8277, 8277, 8277, 0, 0, 8302, 8302,
  8302, 8302, 8302, 8302, 81006, 8302, 8302, 0, 0, 0, 0, 0, 0, 0, 0, 8462, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 141502, 141502, 192, 0, 0, 6499, 0, 0, 0, 0, 8277, 0, 423, 0, 0, 8302, 8302, 8621, 8302, 8403, 8302, 0, 0,
  0, 0, 8462, 0, 0, 0, 274, 0, 95, 95, 192, 0, 91, 0, 0, 0, 0, 95, 8277, 0, 8277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8302, 8302,
  0, 8302, 8302, 8302, 8302, 0, 0, 91, 8277, 7252, 0, 0, 8277, 8277, 0, 8277, 8277, 0, 8277, 0, 0, 0, 0, 8682, 8302,
  8302, 8302, 8302, 0, 0, 0, 461, 0, 0, 0, 0, 0, 0, 95, 8277, 0, 8277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245, 0, 0, 100352, 0,
  0, 0, 0, 8277, 8277, 8277, 8277, 8277, 8308, 0, 8277, 8319, 8277, 8319, 8277, 8277, 8308, 8308, 155, 155, 8308, 155,
  8308, 8308, 155, 8308, 155, 155, 8308, 155, 155, 8368, 0, 0, 0, 0, 15360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  110592, 0, 0, 8277, 8277, 8418, 8277, 0, 8277, 8277, 8277, 0, 0, 8425, 8302, 8302, 8302, 8302, 8302, 8485, 8302, 8277,
  8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8496, 8277, 8277, 8277, 8277, 0, 8277, 8277, 8277, 0, 0, 8396,
  8302, 8302, 8302, 8302, 8302, 0, 0, 0, 8302, 8302, 0, 0, 8445, 8302, 8302, 8302, 8302, 8450, 8302, 8302, 8302, 8524,
  8302, 8302, 8302, 0, 0, 0, 0, 0, 0, 0, 0, 8462, 0, 0, 0, 82, 0, 83, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 184,
  0, 0, 0, 202, 202, 0, 99328, 0, 0, 6499, 0, 0, 0, 0, 8277, 8277, 12572, 0, 6499, 8302, 8302, 8525, 8302, 8302, 8302,
  0, 0, 340, 0, 0, 0, 346, 0, 8462, 0, 0, 0, 184, 0, 0, 0, 0, 0, 0, 202, 202, 202, 202, 202, 202, 184, 184, 184, 184,
  184, 184, 184, 184, 184, 184, 184, 184, 184, 202, 0, 0, 0, 87125, 0, 0, 0, 0, 0, 0, 8302, 8661, 8302, 8663, 8302,
  8302, 8560, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8566, 8277, 8568, 75861, 8277, 8277, 8277, 8277, 0, 8277, 8277,
  8277, 0, 0, 8302, 8397, 8398, 8428, 8302, 8302, 8277, 8277, 8668, 8277, 8670, 8277, 8277, 8277, 8277, 8277, 8277,
  8302, 8676, 8302, 8302, 8302, 8624, 8277, 8277, 8277, 8627, 8277, 8629, 8277, 8631, 8277, 8277, 8277, 8277, 8277,
  8302, 8765, 8302, 8302, 8302, 8302, 8277, 8277, 8302, 8302, 8302, 8302, 8302, 8751, 8302, 8277, 8754, 8277, 8302,
  8757, 8302, 8302, 8302, 8302, 8302, 0, 0, 488, 0, 8302, 8302, 8302, 8684, 8302, 0, 0, 103424, 0, 0, 0, 0, 0, 0, 95, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 8302, 8302, 8688, 8302, 8302, 8302, 8277, 8277, 8277, 8692,
  8277, 8277, 8277, 8277, 0, 8277, 8277, 8277, 0, 0, 8302, 8426, 8302, 8302, 8302, 8302, 8526, 8302, 0, 0, 0, 0, 0, 0,
  0, 0, 8462, 0, 61440, 8277, 8277, 8763, 8302, 8302, 8302, 8302, 8302, 8302, 8277, 8277, 8302, 8302, 8302, 8302, 8302,
  8277, 45166, 8302, 8302, 8302, 8302, 8277, 8302, 8302, 8302, 0, 0, 92, 0, 0, 0, 95, 8277, 0, 8277, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 8302, 8486, 0, 8302, 8302, 8302, 8302, 0, 0, 0, 8277, 7252, 0, 0, 8277, 8277, 102, 8277, 8277, 0, 8277, 102,
  102, 0, 8277, 8277, 8277, 8277, 8300, 8302, 0, 8312, 8277, 8312, 8277, 8312, 8277, 8302, 8302, 8778, 8779, 8302, 8277,
  8302, 8302, 8302, 8302, 8302, 8277, 8302, 8302, 8302, 8302, 8302, 8277, 8302, 8302, 8302, 8302, 8302, 8277, 8302,
  65646, 92270, 156, 156, 8302, 156, 8302, 8302, 156, 8302, 156, 163, 8302, 156, 156, 8369, 0, 0, 0, 0, 18432, 0, 0, 0,
  0, 0, 0, 0, 0, 18432, 18432, 18432, 8397, 8398, 8302, 8401, 8302, 8302, 0, 8277, 8277, 8407, 8408, 8277, 8277, 8277,
  8413, 8277, 8277, 8277, 8277, 0, 8277, 8277, 8277, 24576, 3303, 8302, 8302, 8302, 8302, 8302, 8302, 8277, 8564, 8277,
  8277, 8277, 8277, 8277, 8277, 8277, 8277, 4408, 8302, 8302, 8302, 8302, 8302, 8302, 8302, 0, 100352, 0, 0, 8302, 8302,
  0, 100352, 8302, 8397, 8398, 8302, 8302, 8302, 8302, 8451, 8401, 8277, 8277, 8572, 8277, 8574, 8277, 8277, 0, 8302,
  8302, 8302, 8302, 8302, 8302, 8302, 0, 338, 0, 0, 0, 344, 0, 0, 8462, 0, 0, 0, 0, 392, 0, 0, 0, 8302, 0, 8302, 8302,
  8302, 8302, 8302, 8302, 8594, 0, 0, 0, 2129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 40960, 0, 0, 404, 0,
  264, 0, 0, 0, 406, 0, 268, 0, 0, 0, 0, 0, 0, 0, 19456, 0, 0, 0, 0, 0, 19456, 0, 0, 0, 0, 6499, 0, 0, 0, 0, 8612, 0, 0,
  0, 0, 8302, 8302, 8302, 8302, 8637, 8302, 8302, 8640, 0, 0, 0, 0, 0, 0, 8302, 8302, 8302, 8302, 8302, 0, 494, 0, 461,
  0, 0, 0, 0, 0, 0, 8277, 0, 0, 0, 467, 0, 363, 8302, 8302, 8302, 8302, 8302, 8302, 8709, 8277, 8277, 8277, 8713, 8302,
  8302, 8302, 8302, 0, 0, 0, 8302, 8302, 8302, 8277, 47189, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277,
  8277, 8302, 8302, 8302, 8302, 8678, 8277, 8277, 8695, 8302, 8302, 8302, 0, 0, 0, 8302, 8302, 8302, 8302, 0, 8302,
  8302, 8732, 8277, 8277, 8735, 8302, 8302, 8302, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8302, 8302, 8302, 8302,
  8302, 8302, 8302, 8277, 8277, 8277, 8302, 0, 8277, 8277, 8277, 8277, 8277, 8309, 0, 8277, 8320, 8277, 8320, 8277,
  8277, 8335, 8335, 0, 0, 8335, 0, 8335, 8335, 0, 8335, 0, 0, 8335, 0, 0, 8335, 0, 0, 0, 0, 38912, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 8277, 8277, 8277, 8419, 0, 8277, 8277, 8277, 0, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8748, 8749,
  8302, 8302, 8302, 8277, 8277, 8277, 8302, 8302, 8302, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8746, 0, 279, 0, 281,
  0, 8277, 8277, 8277, 12572, 8462, 203, 8302, 8302, 8302, 8302, 8302, 100462, 8302, 0, 0, 0, 0, 8462, 0, 0, 0, 0, 0,
  95, 95, 192, 8499, 8500, 8277, 8277, 8503, 8277, 0, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8302, 0, 339, 0, 0, 0, 345,
  0, 0, 8462, 0, 0, 0, 340, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 413, 0, 0, 6499, 0, 0, 0, 0, 8277, 0, 424, 0, 0,
  8302, 8302, 8302, 8302, 102510, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 463, 0, 0, 0, 8277, 0, 0, 425, 0, 0, 0, 8302,
  8302, 8302, 8302, 8664, 8302, 8277, 8277, 8277, 8277, 8277, 8671, 8277, 8277, 8277, 8277, 8277, 8302, 8302, 8302,
  8302, 8302, 8302, 8277, 8277, 8302, 8302, 8772, 8773, 8302, 0, 0, 0, 8302, 8302, 0, 0, 8302, 8302, 8302, 62574, 8302,
  8302, 8302, 8302, 8302, 103, 8277, 8277, 8277, 8277, 8277, 8302, 103, 8277, 8277, 8277, 8277, 8277, 8327, 8302, 8302,
  0, 0, 8302, 0, 8302, 8302, 0, 8302, 0, 0, 8356, 103, 103, 8302, 0, 0, 0, 0, 80896, 0, 0, 0, 0, 8302, 8302, 0, 46190,
  8302, 8302, 8302, 0, 265, 269, 0, 8462, 0, 0, 0, 0, 0, 95, 95, 192, 248, 0, 88064, 8302, 8302, 0, 248, 8302, 8302,
  8302, 8302, 8302, 8302, 8302, 8302, 8302, 88174, 8452, 8302, 0, 0, 0, 0, 8462, 0, 0, 0, 0, 275, 95, 95, 192, 8277,
  8277, 8501, 8277, 8277, 8277, 0, 0, 8302, 8302, 8302, 8302, 8509, 8302, 8302, 0, 0, 0, 0, 0, 0, 460, 0, 0, 0, 462, 0,
  353, 0, 0, 8277, 8277, 8299, 8277, 8299, 8302, 0, 8299, 8277, 8299, 8277, 8299, 8277, 8336, 8336, 0, 0, 8336, 0, 8336,
  8336, 0, 8336, 0, 0, 8336, 0, 0, 8336, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 95, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 203, 0, 0, 0, 0, 0, 0, 82, 83, 7252, 8277, 0, 0, 48128, 0, 0, 0, 0, 0, 0, 95, 95, 0, 0, 0, 8302, 8302, 0, 0,
  8302, 8302, 8302, 8302, 8302, 74862, 8302, 8302, 8302, 8277, 8277, 8277, 8502, 8277, 8277, 0, 0, 8302, 8302, 8507,
  8302, 8302, 8302, 8302, 0, 0, 0, 0, 8462, 0, 0, 0, 0, 0, 95, 95, 192, 0, 0, 350, 0, 6499, 0, 0, 0, 0, 8277, 8277,
  12572, 0, 6499, 8302, 8302, 8623, 8302, 8277, 8277, 8277, 8277, 8277, 8277, 8630, 8277, 8277, 8277, 8277, 8277, 8277,
  8636, 71680, 0, 0, 8277, 0, 0, 0, 0, 0, 0, 8302, 8302, 8302, 8302, 8302, 8665, 8277, 8277, 8277, 8277, 8277, 8277,
  8672, 8277, 8277, 71765, 8277, 8302, 8302, 8302, 8302, 8302, 0, 487, 0, 0, 8302, 8302, 8302, 8302, 8685, 0, 0, 0, 0,
  414, 0, 89088, 0, 0, 425, 8302, 8302, 8302, 8302, 8302, 8690, 89173, 8277, 8277, 8277, 8277, 8277, 8694, 8277, 8277,
  8277, 8764, 8302, 8302, 8302, 8302, 8768, 8277, 8769, 8302, 8302, 8302, 8302, 8302, 104, 8277, 8277, 8277, 8277, 8277,
  8310, 104, 8277, 8321, 8277, 8321, 8277, 8328, 8310, 8310, 157, 157, 8310, 161, 8310, 8310, 161, 8310, 161, 157, 8357,
  167, 167, 8370, 0, 0, 0, 93, 0, 0, 95, 8277, 0, 8277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8519, 8302, 0, 8302, 8302, 8302,
  8302, 0, 0, 0, 8302, 8302, 0, 0, 8396, 8302, 8302, 8302, 67694, 8302, 78958, 8302, 8302, 0, 0, 280, 0, 0, 77909, 8277,
  8475, 12572, 8462, 203, 8479, 8302, 8302, 8302, 8302, 98389, 8277, 8277, 8277, 8277, 8277, 8277, 0, 8302, 8302, 8302,
  8302, 8302, 8302, 8302, 0, 450, 0, 0, 0, 0, 8302, 8302, 8302, 8302, 8649, 414, 0, 6499, 0, 417, 0, 0, 8277, 0, 0, 425,
  0, 8302, 8302, 8302, 8302, 101486, 8302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 464, 0, 8277, 0, 0,
  0, 0, 0, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8666, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 70741, 8277, 8277,
  8675, 8302, 8302, 90222, 8302, 63488, 0, 0, 0, 8302, 8302, 63598, 8302, 8302, 55296, 0, 0, 0, 0, 60416, 0, 0, 0, 8277,
  0, 0, 0, 0, 0, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277,
  8277, 8277, 8277, 8302, 0, 0, 0, 8302, 53358, 8302, 60526, 8302, 8302, 8277, 8277, 53333, 8277, 60501, 8277, 8277,
  8277, 8277, 0, 8277, 8277, 8277, 0, 232, 8302, 8302, 8302, 8302, 8302, 8302, 98414, 8277, 8277, 8277, 8277, 8277,
  8277, 8277, 8277, 8277, 8277, 0, 0, 8302, 8302, 8302, 8508, 8302, 8302, 8511, 0, 8775, 8302, 8302, 8302, 8302, 8302,
  8277, 8302, 8302, 8302, 8302, 8302, 8277, 8302, 8302, 8302, 8302, 8780, 8781, 8302, 8302, 8302, 8302, 8302, 8277,
  8302, 8302, 8302, 158, 158, 8302, 158, 8302, 8302, 158, 8302, 158, 158, 8302, 158, 158, 8371, 0, 0, 0, 202, 202, 0, 0,
  202, 202, 202, 202, 202, 202, 202, 202, 202, 0, 0, 195, 8302, 8302, 0, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8302,
  8302, 8302, 8559, 8302, 8302, 8302, 8302, 8302, 8277, 8277, 8277, 8277, 8567, 8277, 8277, 8277, 8277, 8277, 8277, 0,
  0, 8302, 8506, 8302, 8302, 8302, 8302, 8302, 0, 0, 0, 341, 0, 0, 0, 347, 8462, 0, 0, 8277, 8277, 8277, 8573, 8277,
  8277, 8277, 0, 8302, 8302, 8302, 8302, 8302, 8302, 8302, 0, 0, 0, 0, 8462, 0, 272, 0, 0, 0, 95, 95, 192, 0, 415, 6499,
  0, 0, 418, 0, 8277, 0, 0, 0, 426, 8302, 8302, 8302, 8302, 0, 0, 0, 8687, 8302, 8302, 8302, 8302, 8302, 8277, 8691,
  8277, 8277, 8277, 8277, 8277, 8277, 0, 0, 8505, 8302, 8302, 8302, 8302, 8302, 8302, 0, 0, 0, 0, 101376, 0, 8302, 8302,
  8302, 8302, 8302, 58368, 0, 0, 0, 0, 0, 0, 0, 0, 8302, 8302, 0, 8302, 8302, 58478, 8302, 68608, 0, 0, 0, 0, 0, 8302,
  0, 8302, 8302, 68718, 8302, 8302, 8302, 8302, 0, 0, 0, 0, 8462, 271, 0, 0, 0, 0, 95, 95, 192, 0, 8277, 8277, 8277,
  8277, 8277, 8302, 0, 8277, 8277, 8277, 8277, 8324, 8277, 8302, 8302, 0, 0, 0, 8302, 8302, 0, 0, 8302, 8302, 8302,
  8448, 8302, 8302, 8302, 8302, 8302, 0, 0, 6499, 0, 0, 0, 0, 8277, 422, 0, 0, 0, 8302, 8302, 8302, 8302, 0, 105472,
  105472, 105472, 105472, 105472, 0, 0, 105472, 0, 105472, 0, 105472, 105472, 0, 0, 0, 240, 0, 0, 0, 244, 0, 0, 0, 0, 0,
  246, 0, 247, 105472, 105472, 0, 105472, 0, 0, 105472, 0, 105472, 105472, 0, 105472, 105472, 105472, 0, 0, 0, 322, 0,
  0, 322, 0, 0, 8302, 8302, 0, 8302, 8302, 8302, 8302, 106655, 106655, 0, 106655, 0, 0, 106655, 0, 106655, 106655, 0,
  106655, 106655, 106655, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 361, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 21504, 0, 0,
  21504, 0, 0, 108544, 0, 108544, 0, 0, 0, 0, 0, 0, 0, 0, 108544, 0, 0, 0, 352, 6499, 0, 0, 0, 0, 8277, 8277, 12572,
  362, 6499, 8302, 8302, 403, 0, 405, 0, 0, 0, 0, 410, 461, 0, 0, 0, 0, 0, 0, 0, 0, 41984, 0, 0, 0, 41984, 0, 0, 0,
  109568, 0, 0, 0, 0, 0, 0, 109568, 0, 0, 0, 0, 0, 109568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 409, 0, 0, 111616,
  0, 0, 0, 0, 0, 0, 111616, 0, 0, 0, 0, 0, 111616, 0, 0, 0, 353, 6499, 0, 0, 0, 0, 8277, 8277, 12572, 363, 6499, 8302,
  8302, 8277, 8277, 8277, 8277, 8302, 8302, 8302, 8302, 0, 0, 0, 8302, 8302, 8302, 8302, 0, 8302, 8302, 0, 0, 0, 11264,
  11264, 11264, 0, 0, 11264, 0, 11264, 0, 11264, 11264, 0, 0, 0, 353, 6499, 0, 0, 0, 359, 8277, 8277, 12572, 363, 6499,
  8302, 8302, 8638, 8302, 8302, 0, 0, 0, 0, 0, 0, 8302, 8302, 8302, 8302, 8302, 8710, 8711, 8277, 8277, 8302, 8302,
  8302, 8302, 0, 0, 0, 8302, 8302, 8302, 8302, 0, 8706, 8707
);

(:~
 : The DFA-state to expected-token-set mapping.
 :)
declare variable $p:EXPECTED as xs:integer+ :=
(
  76, 84, 92, 100, 107, 125, 239, 246, 178, 148, 133, 260, 253, 141, 193, 156, 163, 171, 186, 224, 201, 209, 543, 417,
  217, 448, 232, 557, 268, 283, 298, 291, 562, 306, 314, 321, 329, 337, 387, 521, 349, 372, 357, 365, 380, 395, 402,
  410, 425, 433, 441, 456, 464, 472, 480, 488, 496, 514, 529, 112, 583, 506, 537, 341, 551, 570, 275, 501, 117, 580,
  572, 571, 571, 571, 571, 112, 591, 598, 615, 602, 602, 604, 608, 612, 619, 623, 594, 627, 631, 638, 634, 642, 646,
  653, 649, 657, 661, 670, 696, 1042, 684, 696, 711, 972, 692, 701, 711, 711, 710, 716, 692, 723, 696, 696, 696, 679,
  696, 696, 696, 696, 789, 696, 696, 737, 696, 1105, 975, 692, 692, 984, 744, 696, 730, 696, 1106, 692, 984, 743, 743,
  987, 997, 792, 765, 770, 692, 711, 711, 981, 692, 979, 711, 711, 711, 712, 692, 693, 982, 694, 977, 760, 979, 982,
  694, 977, 980, 983, 760, 979, 983, 692, 981, 692, 979, 983, 692, 981, 692, 777, 692, 986, 743, 748, 788, 791, 754,
  770, 983, 718, 692, 983, 719, 774, 779, 696, 692, 695, 1000, 769, 692, 980, 711, 797, 793, 1213, 800, 803, 807, 811,
  814, 818, 822, 826, 696, 835, 1104, 696, 832, 899, 856, 696, 696, 905, 1104, 1181, 696, 697, 666, 696, 696, 696, 664,
  786, 880, 863, 706, 904, 1188, 1055, 871, 696, 710, 757, 692, 978, 711, 711, 711, 734, 692, 693, 696, 696, 761, 692,
  695, 1105, 692, 985, 988, 998, 999, 792, 765, 692, 979, 711, 711, 981, 867, 877, 696, 1187, 887, 863, 922, 696, 790,
  696, 696, 990, 738, 696, 686, 896, 904, 696, 696, 696, 906, 696, 1182, 904, 893, 904, 696, 907, 696, 1182, 696, 848,
  877, 867, 877, 1186, 881, 864, 903, 787, 1183, 874, 878, 875, 1184, 889, 1188, 1190, 911, 911, 889, 1188, 1191, 912,
  919, 914, 915, 1075, 913, 1117, 1032, 915, 1119, 913, 1117, 724, 1117, 724, 1119, 1117, 724, 1120, 926, 696, 696, 696,
  696, 788, 696, 696, 696, 959, 696, 696, 696, 963, 696, 928, 969, 696, 1021, 696, 1026, 1040, 1046, 1052, 1180, 1059,
  1029, 696, 696, 851, 788, 1072, 995, 696, 1004, 1009, 828, 1005, 1015, 1179, 696, 1083, 1089, 827, 1094, 1077, 1177,
  696, 848, 964, 696, 696, 696, 851, 965, 1155, 1022, 674, 1101, 865, 750, 676, 696, 849, 696, 930, 1187, 696, 1084,
  1090, 1011, 1085, 1079, 1104, 1127, 672, 782, 1104, 839, 865, 843, 847, 696, 696, 1191, 1110, 696, 696, 696, 849, 696,
  928, 1115, 696, 1193, 1090, 1193, 1078, 1104, 1128, 781, 1103, 1111, 696, 850, 696, 928, 1115, 696, 874, 878, 866,
  876, 696, 1185, 1102, 696, 1068, 1192, 1097, 1104, 1129, 1134, 1064, 851, 1124, 696, 1067, 696, 1036, 1016, 1133,
  1138, 1193, 1193, 1016, 704, 1139, 1194, 1194, 1017, 1066, 1194, 914, 1195, 879, 1034, 1194, 914, 1195, 879, 1143,
  879, 1170, 1168, 879, 1170, 1169, 1147, 1148, 879, 696, 696, 696, 858, 696, 696, 696, 696, 1207, 1211, 725, 696, 696,
  696, 1152, 696, 696, 1048, 696, 782, 696, 934, 937, 941, 945, 951, 949, 955, 1159, 1161, 1062, 1165, 1174, 1201, 1203,
  1199, 726, 696, 696, 680, 696, 696, 696, 696, 874, 878, 852, 877, 696, 996, 696, 991, 739, 696, 696, 688, 696, 696,
  885, 696, 879, 696, 875, 879, 876, 1185, 888, 921, 1189, 678, 696, 696, 696, 696, 696, 696, 696, 696, 989, 687, 696,
  859, 696, 696, 696, 696, 696, 791, 696, 696, 65794, 65808, 65856, 65920, 536936704, 115088, 82320, 82176, 98560,
  196864, 327936, 65792, 65792, 65792, 65792, 67174912, 65922, 82192, 65952, 213248, 134316288, 1245440, 196864, 196864,
  1114368, 134283520, 268501248, 536936704, 268501248, 65792, 65792, 65954, 196944, 114960, 82192, 328096, 82192,
  459168, 538116352, 538116352, 69888, 115088, 115088, 116112, 98720, 116112, 360864, 116112, 116112, 68000, 51581184,
  116112, 120208, 12700094, 63031742, -1069604608, -1069604608, 65653182, -1069604608, -264298240, 13883838,
  -1019268864, 65784254, 65653182, -1069604608, 65784254, -1019236096, -1057228354, 256, 65536, 2, 16, 16, 64, 67108864,
  512, 16384, 2097152, 134217728, 128, 134217728, 268435456, 0, 4, 128, 16384, 0, 0, 0, 1, 16, 0, 0, 67109376, 160, 0,
  0, 4, 8, 0, 0, 2176, 2176, 2176, 2176, 0, 0, 0, 0, 2, 2176, 2176, 33554432, 128, 64, 0, 0, 4096, 16777216, 0, 128,
  128, 128, 128, 8, 8388620, 14, 2176, 2176, 128, 2176, 2176, 8192, -2147483648, 0, 0, 0, 6, 8, 0, 512, 512, 32, 128,
  128, 12, 8, 0, 4, 0, 0, 0, 16, 16, 16, 16, 128, 16, 128, 0, 0, 4, 192, 0, 128, 128, 2048, 2176, 2080, 2176, 0, 2176,
  2176, 0, 2080, 2080, 2080, 2080, 0, 2080, 2080, 2176, 2176, 128, 2176, 128, 2176, 128, 128, 2176, 128, 0, 64, 0, 0, 4,
  2097152, 0, 0, 0, 32, 0, 0, 0, 128, 384, 0, 128, 0, 256, 256, 256, 256, 101220352, 516, 256, 101228544, 1048832,
  101228544, 1048832, 134218020, -959673216, -959673216, 822088251, -959673216, 822088251, -959673216, -959673152,
  822219323, -959673152, 822219387, 822088315, -959672700, 822285119, 822285119, -137388357, 0, 0, 0, 512, 8192, 0,
  67108864, 4, 0, 0, 16384, 2097152, 0, 35840, 786432, 46137344, 1, 48, 4096, 16777216, 805306368, 0, 0, 0, 32768, 0, 0,
  0, 40960, 62914560, 872415232, 0, 0, 16, 0, 0, 262144, 12582912, -1073741824, 0, 0, 0, 8192, 32768, 196608, 16777216,
  536870912, 0, 0, 32768, 524288, 33554432, 67108864, 0, 0, 0, 3072, 262144, 0, 2097152, 134217728, 0, 0, 3072,
  12582912, -1073741824, 0, 131072, 0, 131072, 0, 196608, 196608, 0, 39936, 983040, 131072, 536870912, 0, 0, 0, 2097152,
  0, 0, 0, 32768, 33554432, 0, 0, 33554432, 0, 0, 2048, 12582912, -1073741824, 0, 0, 536870912, 0, 0, 8388608, 0, 0, 32,
  4194304, 134217728, 536870912, 4194304, 4194304, 1207959552, 2056, 536872968, 2056, 537921544, -2080047104,
  1207959552, 542115848, -2080038400, 542115896, -2080038400, 542115896, 1207961608, -1752891392, 2250183, -1752891392,
  -1752891392, 2250119, 2250183, 2250183, -1752891392, 2250183, 6444487, -544931840, 1210209735, 1210209735,
  -1750641209, 32768, 524288, 0, 0, 0, 4194336, 134217728, 1073741824, 8, 2048, 2176, 2208, 2176, 0, 0, 2176, 2176,
  2176, 128, 128, 128, 2176, 2176, 2176, 16, 16, 16, 0, 0, 0, 8, 0, 536870912, 1048576, 0, 0, 32, 32, 32, 0, 0, 0,
  327680, 67108864, -2147483648, 0, 0, 5242880, 0, 0, 512, 65536, 56, 0, 0, 0, 50331648, 128, 125829120, 268435456, 0,
  0, 0, 3, 388, 5120, 16384, 458752, 2097152, -2147483648, 0, 33554432, 0, 65536, 67108864, 0, 134217728, 131072,
  2097152, 0, 0, 512, 66048, 0, 452, 0, 0, 1024, 0, 6291456, 134217728, -1073741824, 0, 0, 196608, 7168, 0, 3, 452,
  5120, 64, 0, 64, 128, 0, 65536, 67108864, 4194304, 0, 4194304, 134217728, 1073741824, 2048, 12582912, -2147483648, 0,
  16, 32, 0, 0, 0, 65536, 262144, 67108864, -2147483648, 0, -2147483648, 4194304, 0, 0, 0, 8192, 65536, 262144,
  67108864, 0, 16, 32, 192, 0, 0, 134217728, 0, 0, 0, 2176, 0, 4, 64, 128, 0, 0, 134217728, 1048576, 0, 0, 2048,
  8388608, -2147483648, 0, 0, 0, 4194304, 134217728, 0, 0, 8388608, 50331648, 0, 128, 128, 64, 0, 134217728, 0, 0, 64,
  128, 32768, 0, 33554432, 65536, 67108864, 65536, 0, 67108864, 67108864, 67108864, 67108864, 1, 16, 64, 0, 0, 8388608,
  117440512, 0, 5120, 64, 576, 64, 0, 0, 96, 7744, 0, 0, 33554432, 67108864, 67108864, 0, 0, 458, 458, 0, 0, 134217728,
  1073741824, 0, 0, 0, 67108864, 0, 0, 1048576, 0, 0, 0, 131072, 0, 0, 0, 65536, 67108864, 0, 65536, 5582, 5582, 462, 0,
  0, 462, 458, 5120, 0, 2, 8, 256, 0, 6, 0, 0, 16384, 4
);

(:~
 : The token-string table.
 :)
declare variable $p:TOKEN as xs:string+ :=
(
  "(0)",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "URIQualifiedName",
  "NCName",
  "QName",
  "S",
  "CommentContents",
  "EOF",
  "Wildcard",
  "'!'",
  "'!='",
  "'$'",
  "'('",
  "'(:'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<<'",
  "'<='",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'@'",
  "'['",
  "']'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'array'",
  "'as'",
  "'attribute'",
  "'cast'",
  "'castable'",
  "'child'",
  "'comment'",
  "'declare'",
  "'default'",
  "'descendant'",
  "'descendant-or-self'",
  "'div'",
  "'document-node'",
  "'element'",
  "'else'",
  "'eq'",
  "'except'",
  "'following'",
  "'following-sibling'",
  "'ge'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'inputs'",
  "'instance'",
  "'intersect'",
  "'is'",
  "'item'",
  "'le'",
  "'let'",
  "'lt'",
  "'map'",
  "'mod'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'node'",
  "'of'",
  "'option'",
  "'or'",
  "'outputs'",
  "'parent'",
  "'preceding'",
  "'preceding-sibling'",
  "'processing-instruction'",
  "'replace'",
  "'self'",
  "'step'",
  "'tee'",
  "'text'",
  "'then'",
  "'to'",
  "'treat'",
  "'union'",
  "'version'",
  "'xproc'",
  "'{'",
  "'|'",
  "'||'",
  "'}'",
  "(106)",
  "(107)",
  "(108)"
);

(:~
 : Match next token in input string, starting at given index, using
 : the DFA entry state for the set of tokens that are expected in
 : the current context.
 :
 : @param $input the input string.
 : @param $begin the index where to start in input string.
 : @param $token-set the expected token set id.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:match($input as xs:string,
                         $begin as xs:integer,
                         $token-set as xs:integer) as xs:integer+
{
  let $result := $p:INITIAL[1 + $token-set]
  return p:transition($input,
                      $begin,
                      $begin,
                      $begin,
                      $result,
                      $result mod 1024,
                      0)
};

(:~
 : The DFA state transition function. If we are in a valid DFA state, save
 : it's result annotation, consume one input codepoint, calculate the next
 : state, and use tail recursion to do the same again. Otherwise, return
 : any valid result or a negative DFA state id in case of an error.
 :
 : @param $input the input string.
 : @param $begin the begin index of the current token in the input string.
 : @param $current the index of the current position in the input string.
 : @param $end the end index of the result in the input string.
 : @param $result the result code.
 : @param $current-state the current DFA state.
 : @param $previous-state the  previous DFA state.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:transition($input as xs:string,
                              $begin as xs:integer,
                              $current as xs:integer,
                              $end as xs:integer,
                              $result as xs:integer,
                              $current-state as xs:integer,
                              $previous-state as xs:integer) as xs:integer+
{
  if ($current-state = 0) then
    let $result := $result idiv 1024
    return
      if ($result != 0) then
      (
        $result mod 128 - 1,
        $begin,
        $end - $result idiv 128
      )
      else
      (
        - $previous-state,
        $begin,
        $current - 1
      )
  else
    let $c0 := (string-to-codepoints(substring($input, $current, 1)), 0)[1]
    let $c1 :=
      if ($c0 < 128) then
        $p:MAP0[1 + $c0]
      else if ($c0 < 55296) then
        let $c1 := $c0 idiv 16
        let $c2 := $c1 idiv 32
        return $p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]
      else
        p:map2($c0, 1, 6)
    let $current := $current + 1
    let $i0 := 1024 * $c1 + $current-state - 1
    let $i1 := $i0 idiv 16
    let $next-state := $p:TRANSITION[$i0 mod 16 + $p:TRANSITION[$i1 + 1] + 1]
    return
      if ($next-state > 1023) then
        p:transition($input, $begin, $current, $current, $next-state, $next-state mod 1024, $current-state)
      else
        p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
};

(:~
 : Recursively translate one 32-bit chunk of an expected token bitset
 : to the corresponding sequence of token strings.
 :
 : @param $result the result of previous recursion levels.
 : @param $chunk the 32-bit chunk of the expected token bitset.
 : @param $base-token-code the token code of bit 0 in the current chunk.
 : @return the set of token strings.
 :)
declare function p:token($result as xs:string*,
                         $chunk as xs:integer,
                         $base-token-code as xs:integer) as xs:string*
{
  if ($chunk = 0) then
    $result
  else
    p:token
    (
      ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
      if ($chunk < 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
      $base-token-code + 1
    )
};

(:~
 : Calculate expected token set for a given DFA state as a sequence
 : of strings.
 :
 : @param $state the DFA state.
 : @return the set of token strings
 :)
declare function p:expected-token-set($state as xs:integer) as xs:string*
{
  if ($state > 0) then
    for $t in 0 to 3
    let $i0 := $t * 603 + $state - 1
    let $i1 := $i0 idiv 4
    let $i2 := $i1 idiv 8
    return p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 mod 8 + $p:EXPECTED[$i2 + 1] + 1] + 1], $t * 32 + 1)
  else
    ()
};

(:~
 : Classify codepoint by doing a tail recursive binary search for a
 : matching codepoint range entry in MAP2, the codepoint to charclass
 : map for codepoints above the surrogate block.
 :
 : @param $c the codepoint.
 : @param $lo the binary search lower bound map index.
 : @param $hi the binary search upper bound map index.
 : @return the character class.
 :)
declare function p:map2($c as xs:integer, $lo as xs:integer, $hi as xs:integer) as xs:integer
{
  if ($lo > $hi) then
    0
  else
    let $m := ($hi + $lo) idiv 2
    return
      if ($p:MAP2[$m] > $c) then
        p:map2($c, $lo, $m - 1)
      else if ($p:MAP2[6 + $m] < $c) then
        p:map2($c, $m + 1, $hi)
      else
        $p:MAP2[12 + $m]
};

(:~
 : Try parsing the 1st loop of production Comment (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-Comment-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(22, $input, $state)          (: CommentContents | ('(' ':') | (':' ')') :)
    return
      if ($state[$p:l1] = 26) then                          (: (':' ')') :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 9) then                  (: CommentContents :)
            let $state := p:shiftT(9, $input, $state)       (: CommentContents :)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:try-Comment($input, $state)
            return $state
        return p:try-Comment-1($input, $state)
};

(:~
 : Try parsing Comment.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-Comment($input as xs:string, $state as item()+) as item()+
{
  let $state := p:shiftT(16, $input, $state)                (: ('(' ':') :)
  let $state := p:try-Comment-1($input, $state)
  let $state := p:shiftT(26, $input, $state)                (: (':' ')') :)
  return $state
};

(:~
 : Try parsing Whitespace.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-Whitespace($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 8) then                        (: S^WS :)
      let $state := p:shiftT(8, $input, $state)             (: S^WS :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:try-Comment($input, $state)
      return $state
  return $state
};

(:~
 : Parse XProcLetBody.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcLetBody($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-XProcBlockStatement($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcLetBody", $count, $begin, $end)
};

(:~
 : Parse XProcLetBinding.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcLetBinding($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(14, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(25, $input, $state)           (: URIQualifiedName | QName^Token | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-VarName($input, $state)
  let $state := p:lookahead1W(32, $input, $state)           (: S^WS | ('(' ':') | ':=' | 'as' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 46) then                       (: 'as' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcTypeDeclaration($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(10, $input, $state)           (: S^WS | ('(' ':') | ':=' :)
  let $state := p:shift(28, $input, $state)                 (: ':=' :)
  let $state := p:lookahead1W(66, $input, $state)           (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcLetBinding", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production XProcLetStatement (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcLetStatement-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 20) then                           (: ',' :)
      $state
    else
      let $state := p:shift(20, $input, $state)             (: ',' :)
      let $state := p:lookahead1W(4, $input, $state)        (: S^WS | '$' | ('(' ':') :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcLetBinding($input, $state)
      return p:parse-XProcLetStatement-1($input, $state)
};

(:~
 : Parse XProcLetStatement.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcLetStatement($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(75, $input, $state)                 (: 'let' :)
  let $state := p:lookahead1W(4, $input, $state)            (: S^WS | '$' | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcLetBinding($input, $state)
  let $state := p:parse-XProcLetStatement-1($input, $state)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcLetBody($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcLetStatement", $count, $begin, $end)
};

(:~
 : Parse XProcIfStatement.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcIfStatement($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(67, $input, $state)                 (: 'if' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(66, $input, $state)           (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $state := p:lookahead1W(19, $input, $state)           (: S^WS | ('(' ':') | 'then' :)
  let $state := p:shift(96, $input, $state)                 (: 'then' :)
  let $state := p:lookahead1W(49, $input, $state)           (: StringLiteral | QName^Token | S^WS | '$' | '(' |
                                                               ('(' ':') | '[' | 'if' | 'let' | '{' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcFlowStatement($input, $state)
  let $state := p:lookahead1W(16, $input, $state)           (: S^WS | ('(' ':') | 'else' :)
  let $state := p:shift(59, $input, $state)                 (: 'else' :)
  let $state := p:lookahead1W(49, $input, $state)           (: StringLiteral | QName^Token | S^WS | '$' | '(' |
                                                               ('(' ':') | '[' | 'if' | 'let' | '{' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcFlowStatement($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcIfStatement", $count, $begin, $end)
};

(:~
 : Parse XProcOutputPortBinding.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcOutputPortBinding($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: QName^Token :)
      let $state := p:parse-QName($input, $state)
      let $state := p:lookahead1W(12, $input, $state)       (: S^WS | ('(' ':') | '=' :)
      let $state := p:shift(33, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(38, $input, $state)           (: StringLiteral | S^WS | '$' | ('(' ':') | '@' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcOutputItem($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcOutputPortBinding", $count, $begin, $end)
};

(:~
 : Parse XProcOutputPortList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcOutputPortList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(40, $input, $state)                 (: '[' :)
  let $state := p:lookahead1W(43, $input, $state)           (: StringLiteral | QName^Token | S^WS | '$' | ('(' ':') |
                                                               '@' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcOutputPortBinding($input, $state)
  let $state := p:lookahead1W(8, $input, $state)            (: S^WS | ('(' ':') | ',' :)
  let $state := p:shift(20, $input, $state)                 (: ',' :)
  let $state := p:lookahead1W(43, $input, $state)           (: StringLiteral | QName^Token | S^WS | '$' | ('(' ':') |
                                                               '@' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcOutputPortBinding($input, $state)
  let $state := p:lookahead1W(13, $input, $state)           (: S^WS | ('(' ':') | ']' :)
  let $state := p:shift(41, $input, $state)                 (: ']' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcOutputPortList", $count, $begin, $end)
};

(:~
 : Parse XProcOutputOrdinal.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcOutputOrdinal($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(39, $input, $state)                 (: '@' :)
  let $state := p:lookahead1W(0, $input, $state)            (: IntegerLiteral | S^WS | ('(' ':') :)
  let $state := p:shift(1, $input, $state)                  (: IntegerLiteral :)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcOutputOrdinal", $count, $begin, $end)
};

(:~
 : Parse XProcOutputItem.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcOutputItem($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 4) then                        (: StringLiteral :)
      let $state := p:parse-XProcURILiteral($input, $state)
      return $state
    else if ($state[$p:l1] = 14) then                       (: '$' :)
      let $state := p:parse-XProcPortRef($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-XProcOutputOrdinal($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcOutputItem", $count, $begin, $end)
};

(:~
 : Parse XProcAppend.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcAppend($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 37) then                       (: '>>' :)
      let $state := p:shift(37, $input, $state)             (: '>>' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(107, $input, $state)            (: '≫' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcAppend", $count, $begin, $end)
};

(:~
 : Parse XProcOutputBinding.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcOutputBinding($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-XProcAppend($input, $state)
  let $state := p:lookahead1W(44, $input, $state)           (: StringLiteral | S^WS | '$' | ('(' ':') | '@' | '[' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 40) then                       (: '[' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcOutputPortList($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcOutputItem($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcOutputBinding", $count, $begin, $end)
};

(:~
 : Parse XProcReplace.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcReplace($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(91, $input, $state)                 (: 'replace' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcReplace", $count, $begin, $end)
};

(:~
 : Parse XProcReplacedItem.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcReplacedItem($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-XProcReplace($input, $state)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(63, $input, $state)           (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '.' | '..' | '/' |
                                                               '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                               'attribute' | 'child' | 'comment' | 'descendant' |
                                                               'descendant-or-self' | 'document-node' | 'element' |
                                                               'following' | 'following-sibling' | 'namespace-node' |
                                                               'node' | 'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'self' | 'text' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-PathExpr($input, $state)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $state := p:lookahead1W(21, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcBlockStatement($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcReplacedItem", $count, $begin, $end)
};

(:~
 : Parse XProcTee.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcTee($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 94) then                       (: 'tee' :)
      let $state := p:shift(94, $input, $state)             (: 'tee' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(108, $input, $state)            (: '⊤' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcTee", $count, $begin, $end)
};

(:~
 : Parse XProcTeedItem.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcTeedItem($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-XProcTee($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcBlockStatement($input, $state)
  let $state := p:lookahead1W(33, $input, $state)           (: S^WS | ('(' ':') | '=>' | '→' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcChainedItem($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcTeedItem", $count, $begin, $end)
};

(:~
 : Parse XProcIteration.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcIteration($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(12, $input, $state)                 (: '!' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcIteration", $count, $begin, $end)
};

(:~
 : Parse XProcIteratedItem.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcIteratedItem($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-XProcIteration($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcBlockStatement($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcIteratedItem", $count, $begin, $end)
};

(:~
 : Parse XProcBlockStatement.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcBlockStatement($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(102, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(50, $input, $state)           (: StringLiteral | QName^Token | S^WS | '$' | '(' |
                                                               ('(' ':') | '[' | 'if' | 'let' | '{' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 105) then                     (: '}' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcFlow($input, $state)
      return $state
    else
      $state
  let $state := p:shift(105, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcBlockStatement", $count, $begin, $end)
};

(:~
 : Parse XProcArgumentList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcArgumentList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ArgumentList($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcArgumentList", $count, $begin, $end)
};

(:~
 : Parse XProcStepName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcStepName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-QName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcStepName", $count, $begin, $end)
};

(:~
 : Parse XProcInputPortBinding.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcInputPortBinding($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: QName^Token :)
      let $state := p:parse-QName($input, $state)
      let $state := p:lookahead1W(12, $input, $state)       (: S^WS | ('(' ':') | '=' :)
      let $state := p:shift(33, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(37, $input, $state)           (: StringLiteral | S^WS | '$' | '(' | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcSequenceLiteral($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcInputPortBinding", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production XProcInputPortList (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcInputPortList-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(31, $input, $state)         (: S^WS | ('(' ':') | ',' | ']' :)
    return
      if ($state[$p:l1] != 20) then                         (: ',' :)
        $state
      else
        let $state := p:shift(20, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(42, $input, $state)     (: StringLiteral | QName^Token | S^WS | '$' | '(' |
                                                               ('(' ':') :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-XProcInputPortBinding($input, $state)
        return p:parse-XProcInputPortList-1($input, $state)
};

(:~
 : Parse XProcInputPortList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcInputPortList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(40, $input, $state)                 (: '[' :)
  let $state := p:lookahead1W(42, $input, $state)           (: StringLiteral | QName^Token | S^WS | '$' | '(' |
                                                               ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcInputPortBinding($input, $state)
  let $state := p:parse-XProcInputPortList-1($input, $state)
  let $state := p:shift(41, $input, $state)                 (: ']' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcInputPortList", $count, $begin, $end)
};

(:~
 : Parse XProcStepInvocation.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcStepInvocation($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 40) then                       (: '[' :)
      let $state := p:parse-XProcInputPortList($input, $state)
      let $state := p:lookahead1W(33, $input, $state)       (: S^WS | ('(' ':') | '=>' | '→' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcArrow($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(3, $input, $state)            (: QName^Token | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcStepName($input, $state)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcArgumentList($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcStepInvocation", $count, $begin, $end)
};

(:~
 : Parse XProcChainItem.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcChainItem($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 102) then                      (: '{' :)
      let $state := p:parse-XProcBlockStatement($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-XProcStepInvocation($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcChainItem", $count, $begin, $end)
};

(:~
 : Parse XProcArrow.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcArrow($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 34) then                       (: '=>' :)
      let $state := p:shift(34, $input, $state)             (: '=>' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(106, $input, $state)            (: '→' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcArrow", $count, $begin, $end)
};

(:~
 : Parse XProcChainedItem.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcChainedItem($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-XProcArrow($input, $state)
  let $state := p:lookahead1W(40, $input, $state)           (: QName^Token | S^WS | ('(' ':') | '[' | '{' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcChainItem($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcChainedItem", $count, $begin, $end)
};

(:~
 : Parse XProcStepChainItem.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcStepChainItem($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 34                             (: '=>' :)
          or $state[$p:l1] = 106) then                      (: '→' :)
      let $state := p:parse-XProcChainedItem($input, $state)
      return $state
    else if ($state[$p:l1] = 12) then                       (: '!' :)
      let $state := p:parse-XProcIteratedItem($input, $state)
      return $state
    else if ($state[$p:l1] = 91) then                       (: 'replace' :)
      let $state := p:parse-XProcReplacedItem($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-XProcTeedItem($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcStepChainItem", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production PredicateList (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PredicateList-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(75, $input, $state)         (: S^WS | '!' | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | '/' | '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                                               '>=' | '>>' | '[' | ']' | 'and' | 'cast' | 'castable' |
                                                               'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                                               'ne' | 'or' | 'replace' | 'tee' | 'to' | 'treat' |
                                                               'union' | '{' | '|' | '||' | '→' | '⊤' :)
    return
      if ($state[$p:l1] != 40) then                         (: '[' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state := p:parse-Predicate($input, $state)
        return p:parse-PredicateList-1($input, $state)
};

(:~
 : Parse PredicateList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PredicateList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-PredicateList-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "PredicateList", $count, $begin, $end)
};

(:~
 : Parse AbbrevForwardStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AbbrevForwardStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 39) then                       (: '@' :)
      let $state := p:shift(39, $input, $state)             (: '@' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(54, $input, $state)           (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'attribute' | 'comment' | 'document-node' |
                                                               'element' | 'namespace-node' | 'node' |
                                                               'processing-instruction' | 'text' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-NodeTest($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AbbrevForwardStep", $count, $begin, $end)
};

(:~
 : Parse ForwardAxis.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ForwardAxis($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 50) then                       (: 'child' :)
      let $state := p:shift(50, $input, $state)             (: 'child' :)
      let $state := p:lookahead1W(9, $input, $state)        (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(27, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 54) then                       (: 'descendant' :)
      let $state := p:shift(54, $input, $state)             (: 'descendant' :)
      let $state := p:lookahead1W(9, $input, $state)        (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(27, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 47) then                       (: 'attribute' :)
      let $state := p:shift(47, $input, $state)             (: 'attribute' :)
      let $state := p:lookahead1W(9, $input, $state)        (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(27, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 92) then                       (: 'self' :)
      let $state := p:shift(92, $input, $state)             (: 'self' :)
      let $state := p:lookahead1W(9, $input, $state)        (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(27, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 55) then                       (: 'descendant-or-self' :)
      let $state := p:shift(55, $input, $state)             (: 'descendant-or-self' :)
      let $state := p:lookahead1W(9, $input, $state)        (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(27, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 63) then                       (: 'following-sibling' :)
      let $state := p:shift(63, $input, $state)             (: 'following-sibling' :)
      let $state := p:lookahead1W(9, $input, $state)        (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(27, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(62, $input, $state)             (: 'following' :)
      let $state := p:lookahead1W(9, $input, $state)        (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(27, $input, $state)             (: '::' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ForwardAxis", $count, $begin, $end)
};

(:~
 : Parse ForwardStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ForwardStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] eq 47) then                           (: 'attribute' :)
      let $state := p:lookahead2W(27, $input, $state)       (: S^WS | '(' | ('(' ':') | '::' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 50                             (: 'child' :)
          or $state[$p:lk] = 54                             (: 'descendant' :)
          or $state[$p:lk] = 55                             (: 'descendant-or-self' :)
          or $state[$p:lk] = 62                             (: 'following' :)
          or $state[$p:lk] = 63                             (: 'following-sibling' :)
          or $state[$p:lk] = 92                             (: 'self' :)
          or $state[$p:lk] = 3503) then                     (: 'attribute' '::' :)
      let $state := p:parse-ForwardAxis($input, $state)
      let $state := p:lookahead1W(54, $input, $state)       (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'attribute' | 'comment' | 'document-node' |
                                                               'element' | 'namespace-node' | 'node' |
                                                               'processing-instruction' | 'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-NodeTest($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-AbbrevForwardStep($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ForwardStep", $count, $begin, $end)
};

(:~
 : Parse AbbrevReverseStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AbbrevReverseStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(23, $input, $state)                 (: '..' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "AbbrevReverseStep", $count, $begin, $end)
};

(:~
 : Parse NameTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NameTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 11) then                       (: Wildcard :)
      let $state := p:shift(11, $input, $state)             (: Wildcard :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-EQName($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NameTest", $count, $begin, $end)
};

(:~
 : Parse NodeTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NodeTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 5                              (: URIQualifiedName :)
          or $state[$p:l1] = 7                              (: QName^Token :)
          or $state[$p:l1] = 11) then                       (: Wildcard :)
      let $state := p:parse-NameTest($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-KindTest($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NodeTest", $count, $begin, $end)
};

(:~
 : Parse ReverseAxis.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ReverseAxis($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 87) then                       (: 'parent' :)
      let $state := p:shift(87, $input, $state)             (: 'parent' :)
      let $state := p:lookahead1W(9, $input, $state)        (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(27, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 42) then                       (: 'ancestor' :)
      let $state := p:shift(42, $input, $state)             (: 'ancestor' :)
      let $state := p:lookahead1W(9, $input, $state)        (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(27, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 89) then                       (: 'preceding-sibling' :)
      let $state := p:shift(89, $input, $state)             (: 'preceding-sibling' :)
      let $state := p:lookahead1W(9, $input, $state)        (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(27, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 88) then                       (: 'preceding' :)
      let $state := p:shift(88, $input, $state)             (: 'preceding' :)
      let $state := p:lookahead1W(9, $input, $state)        (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(27, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(43, $input, $state)             (: 'ancestor-or-self' :)
      let $state := p:lookahead1W(9, $input, $state)        (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(27, $input, $state)             (: '::' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ReverseAxis", $count, $begin, $end)
};

(:~
 : Parse ReverseStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ReverseStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 23) then                       (: '..' :)
      let $state := p:parse-AbbrevReverseStep($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-ReverseAxis($input, $state)
      let $state := p:lookahead1W(54, $input, $state)       (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'attribute' | 'comment' | 'document-node' |
                                                               'element' | 'namespace-node' | 'node' |
                                                               'processing-instruction' | 'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-NodeTest($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ReverseStep", $count, $begin, $end)
};

(:~
 : Parse AxisStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AxisStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 23                             (: '..' :)
          or $state[$p:l1] = 42                             (: 'ancestor' :)
          or $state[$p:l1] = 43                             (: 'ancestor-or-self' :)
          or $state[$p:l1] = 87                             (: 'parent' :)
          or $state[$p:l1] = 88                             (: 'preceding' :)
          or $state[$p:l1] = 89) then                       (: 'preceding-sibling' :)
      let $state := p:parse-ReverseStep($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-ForwardStep($input, $state)
      return $state
  let $state := p:lookahead1W(75, $input, $state)           (: S^WS | '!' | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | '/' | '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                                               '>=' | '>>' | '[' | ']' | 'and' | 'cast' | 'castable' |
                                                               'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                                               'ne' | 'or' | 'replace' | 'tee' | 'to' | 'treat' |
                                                               'union' | '{' | '|' | '||' | '→' | '⊤' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-PredicateList($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AxisStep", $count, $begin, $end)
};

(:~
 : Parse Predicate.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Predicate($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(40, $input, $state)                 (: '[' :)
  let $state := p:lookahead1W(66, $input, $state)           (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(41, $input, $state)                 (: ']' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "Predicate", $count, $begin, $end)
};

(:~
 : Parse ArgumentPlaceholder.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ArgumentPlaceholder($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(38, $input, $state)                 (: '?' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ArgumentPlaceholder", $count, $begin, $end)
};

(:~
 : Parse Argument.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Argument($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 38) then                       (: '?' :)
      let $state := p:parse-ArgumentPlaceholder($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-ExprSingle($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Argument", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production ArgumentList (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ArgumentList-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(28, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 20) then                         (: ',' :)
        $state
      else
        let $state := p:shift(20, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(69, $input, $state)     (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '?' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-Argument($input, $state)
        return p:parse-ArgumentList-1($input, $state)
};

(:~
 : Parse ArgumentList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ArgumentList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(71, $input, $state)           (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | ')' | '+' | '-' |
                                                               '.' | '..' | '/' | '//' | '?' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 17) then                      (: ')' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-Argument($input, $state)
      let $state := p:parse-ArgumentList-1($input, $state)
      return $state
    else
      $state
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ArgumentList", $count, $begin, $end)
};

(:~
 : Parse FunctionCall.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-FunctionCall($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-FunctionName($input, $state)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ArgumentList($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "FunctionCall", $count, $begin, $end)
};

(:~
 : Parse ContextItemExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ContextItemExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(22, $input, $state)                 (: '.' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ContextItemExpr", $count, $begin, $end)
};

(:~
 : Parse NodeComp.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NodeComp($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 72) then                       (: 'is' :)
      let $state := p:shift(72, $input, $state)             (: 'is' :)
      return $state
    else if ($state[$p:l1] = 31) then                       (: '<<' :)
      let $state := p:shift(31, $input, $state)             (: '<<' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(37, $input, $state)             (: '>>' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NodeComp", $count, $begin, $end)
};

(:~
 : Parse GeneralComp.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-GeneralComp($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 33) then                       (: '=' :)
      let $state := p:shift(33, $input, $state)             (: '=' :)
      return $state
    else if ($state[$p:l1] = 13) then                       (: '!=' :)
      let $state := p:shift(13, $input, $state)             (: '!=' :)
      return $state
    else if ($state[$p:l1] = 30) then                       (: '<' :)
      let $state := p:shift(30, $input, $state)             (: '<' :)
      return $state
    else if ($state[$p:l1] = 32) then                       (: '<=' :)
      let $state := p:shift(32, $input, $state)             (: '<=' :)
      return $state
    else if ($state[$p:l1] = 35) then                       (: '>' :)
      let $state := p:shift(35, $input, $state)             (: '>' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(36, $input, $state)             (: '>=' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "GeneralComp", $count, $begin, $end)
};

(:~
 : Parse ValueComp.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ValueComp($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 60) then                       (: 'eq' :)
      let $state := p:shift(60, $input, $state)             (: 'eq' :)
      return $state
    else if ($state[$p:l1] = 81) then                       (: 'ne' :)
      let $state := p:shift(81, $input, $state)             (: 'ne' :)
      return $state
    else if ($state[$p:l1] = 76) then                       (: 'lt' :)
      let $state := p:shift(76, $input, $state)             (: 'lt' :)
      return $state
    else if ($state[$p:l1] = 74) then                       (: 'le' :)
      let $state := p:shift(74, $input, $state)             (: 'le' :)
      return $state
    else if ($state[$p:l1] = 65) then                       (: 'gt' :)
      let $state := p:shift(65, $input, $state)             (: 'gt' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(64, $input, $state)             (: 'ge' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ValueComp", $count, $begin, $end)
};

(:~
 : Parse SimpleTypeName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SimpleTypeName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-TypeName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "SimpleTypeName", $count, $begin, $end)
};

(:~
 : Parse SingleType.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SingleType($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-SimpleTypeName($input, $state)
  let $state := p:lookahead1W(72, $input, $state)           (: S^WS | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' |
                                                               'and' | 'castable' | 'div' | 'eq' | 'except' | 'ge' |
                                                               'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                                               'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' | 'union' |
                                                               '{' | '|' | '||' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 38) then                       (: '?' :)
      let $state := p:shift(38, $input, $state)             (: '?' :)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "SingleType", $count, $begin, $end)
};

(:~
 : Parse PathExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PathExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 24) then                       (: '/' :)
      let $state := p:shift(24, $input, $state)             (: '/' :)
      let $state := p:lookahead1W(77, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '!' | '!=' | '$' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '.' | '..' | '<' | '<<' | '<=' |
                                                               '=' | '>' | '>=' | '>>' | '@' | ']' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'attribute' | 'cast' |
                                                               'castable' | 'child' | 'comment' | 'descendant' |
                                                               'descendant-or-self' | 'div' | 'document-node' |
                                                               'element' | 'eq' | 'except' | 'following' |
                                                               'following-sibling' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                                               'namespace-node' | 'ne' | 'node' | 'or' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'self' | 'text' | 'to' |
                                                               'treat' | 'union' | '{' | '|' | '||' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 1                          (: IntegerLiteral :)
              or $state[$p:l1] = 2                          (: DecimalLiteral :)
              or $state[$p:l1] = 3                          (: DoubleLiteral :)
              or $state[$p:l1] = 4                          (: StringLiteral :)
              or $state[$p:l1] = 5                          (: URIQualifiedName :)
              or $state[$p:l1] = 7                          (: QName^Token :)
              or $state[$p:l1] = 11                         (: Wildcard :)
              or $state[$p:l1] = 14                         (: '$' :)
              or $state[$p:l1] = 15                         (: '(' :)
              or $state[$p:l1] = 22                         (: '.' :)
              or $state[$p:l1] = 23                         (: '..' :)
              or $state[$p:l1] = 39                         (: '@' :)
              or $state[$p:l1] = 42                         (: 'ancestor' :)
              or $state[$p:l1] = 43                         (: 'ancestor-or-self' :)
              or $state[$p:l1] = 47                         (: 'attribute' :)
              or $state[$p:l1] = 50                         (: 'child' :)
              or $state[$p:l1] = 51                         (: 'comment' :)
              or $state[$p:l1] = 54                         (: 'descendant' :)
              or $state[$p:l1] = 55                         (: 'descendant-or-self' :)
              or $state[$p:l1] = 57                         (: 'document-node' :)
              or $state[$p:l1] = 58                         (: 'element' :)
              or $state[$p:l1] = 62                         (: 'following' :)
              or $state[$p:l1] = 63                         (: 'following-sibling' :)
              or $state[$p:l1] = 80                         (: 'namespace-node' :)
              or $state[$p:l1] = 82                         (: 'node' :)
              or $state[$p:l1] = 87                         (: 'parent' :)
              or $state[$p:l1] = 88                         (: 'preceding' :)
              or $state[$p:l1] = 89                         (: 'preceding-sibling' :)
              or $state[$p:l1] = 90                         (: 'processing-instruction' :)
              or $state[$p:l1] = 92                         (: 'self' :)
              or $state[$p:l1] = 95) then                   (: 'text' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-RelativePathExpr($input, $state)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          $state
      return $state
    else if ($state[$p:l1] = 25) then                       (: '//' :)
      let $state := p:shift(25, $input, $state)             (: '//' :)
      let $state := p:lookahead1W(62, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '.' | '..' | '@' |
                                                               'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' |
                                                               'comment' | 'descendant' | 'descendant-or-self' |
                                                               'document-node' | 'element' | 'following' |
                                                               'following-sibling' | 'namespace-node' | 'node' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'self' | 'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-RelativePathExpr($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-RelativePathExpr($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "PathExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production SimpleMapExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SimpleMapExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 12) then                           (: '!' :)
      $state
    else
      let $state := p:shift(12, $input, $state)             (: '!' :)
      let $state := p:lookahead1W(63, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '.' | '..' | '/' |
                                                               '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                               'attribute' | 'child' | 'comment' | 'descendant' |
                                                               'descendant-or-self' | 'document-node' | 'element' |
                                                               'following' | 'following-sibling' | 'namespace-node' |
                                                               'node' | 'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'self' | 'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-PathExpr($input, $state)
      return p:parse-SimpleMapExpr-1($input, $state)
};

(:~
 : Parse SimpleMapExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SimpleMapExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-PathExpr($input, $state)
  let $state := p:parse-SimpleMapExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "SimpleMapExpr", $count, $begin, $end)
};

(:~
 : Parse ValueExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ValueExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-SimpleMapExpr($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ValueExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production UnaryExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-UnaryExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(66, $input, $state)         (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
    return
      if ($state[$p:l1] != 19                               (: '+' :)
      and $state[$p:l1] != 21) then                         (: '-' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 21) then                 (: '-' :)
            let $state := p:shift(21, $input, $state)       (: '-' :)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:shift(19, $input, $state)       (: '+' :)
            return $state
        return p:parse-UnaryExpr-1($input, $state)
};

(:~
 : Parse UnaryExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-UnaryExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-UnaryExpr-1($input, $state)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ValueExpr($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "UnaryExpr", $count, $begin, $end)
};

(:~
 : Parse CastExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CastExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-UnaryExpr($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 48) then                       (: 'cast' :)
      let $state := p:shift(48, $input, $state)             (: 'cast' :)
      let $state := p:lookahead1W(14, $input, $state)       (: S^WS | ('(' ':') | 'as' :)
      let $state := p:shift(46, $input, $state)             (: 'as' :)
      let $state := p:lookahead1W(25, $input, $state)       (: URIQualifiedName | QName^Token | S^WS | ('(' ':') :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SingleType($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "CastExpr", $count, $begin, $end)
};

(:~
 : Parse CastableExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CastableExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-CastExpr($input, $state)
  let $state := p:lookahead1W(70, $input, $state)           (: S^WS | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'and' | 'castable' | 'div' | 'eq' | 'except' | 'ge' |
                                                               'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                                               'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' | 'union' |
                                                               '{' | '|' | '||' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 49) then                       (: 'castable' :)
      let $state := p:shift(49, $input, $state)             (: 'castable' :)
      let $state := p:lookahead1W(14, $input, $state)       (: S^WS | ('(' ':') | 'as' :)
      let $state := p:shift(46, $input, $state)             (: 'as' :)
      let $state := p:lookahead1W(25, $input, $state)       (: URIQualifiedName | QName^Token | S^WS | ('(' ':') :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SingleType($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "CastableExpr", $count, $begin, $end)
};

(:~
 : Parse TreatExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TreatExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-CastableExpr($input, $state)
  let $state := p:lookahead1W(67, $input, $state)           (: S^WS | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'and' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                                               'ne' | 'or' | 'to' | 'treat' | 'union' | '{' | '|' | '||' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 98) then                       (: 'treat' :)
      let $state := p:shift(98, $input, $state)             (: 'treat' :)
      let $state := p:lookahead1W(14, $input, $state)       (: S^WS | ('(' ':') | 'as' :)
      let $state := p:shift(46, $input, $state)             (: 'as' :)
      let $state := p:lookahead1W(57, $input, $state)       (: URIQualifiedName | QName^Token | S^WS | '(' | ('(' ':') |
                                                               'array' | 'attribute' | 'comment' | 'document-node' |
                                                               'element' | 'item' | 'map' | 'namespace-node' | 'node' |
                                                               'processing-instruction' | 'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SequenceType($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "TreatExpr", $count, $begin, $end)
};

(:~
 : Parse InstanceofExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-InstanceofExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-TreatExpr($input, $state)
  let $state := p:lookahead1W(65, $input, $state)           (: S^WS | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'and' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                                               'ne' | 'or' | 'to' | 'union' | '{' | '|' | '||' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 70) then                       (: 'instance' :)
      let $state := p:shift(70, $input, $state)             (: 'instance' :)
      let $state := p:lookahead1W(18, $input, $state)       (: S^WS | ('(' ':') | 'of' :)
      let $state := p:shift(83, $input, $state)             (: 'of' :)
      let $state := p:lookahead1W(57, $input, $state)       (: URIQualifiedName | QName^Token | S^WS | '(' | ('(' ':') |
                                                               'array' | 'attribute' | 'comment' | 'document-node' |
                                                               'element' | 'item' | 'map' | 'namespace-node' | 'node' |
                                                               'processing-instruction' | 'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SequenceType($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "InstanceofExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production IntersectExceptExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-IntersectExceptExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(64, $input, $state)         (: S^WS | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'and' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                                               'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                                               'to' | 'union' | '{' | '|' | '||' :)
    return
      if ($state[$p:l1] != 61                               (: 'except' :)
      and $state[$p:l1] != 71) then                         (: 'intersect' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 71) then                 (: 'intersect' :)
            let $state := p:shift(71, $input, $state)       (: 'intersect' :)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:shift(61, $input, $state)       (: 'except' :)
            return $state
        let $state := p:lookahead1W(66, $input, $state)     (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-InstanceofExpr($input, $state)
        return p:parse-IntersectExceptExpr-1($input, $state)
};

(:~
 : Parse IntersectExceptExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-IntersectExceptExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-InstanceofExpr($input, $state)
  let $state := p:parse-IntersectExceptExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "IntersectExceptExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production UnionExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-UnionExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 99                                 (: 'union' :)
    and $state[$p:l1] != 103) then                          (: '|' :)
      $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 99) then                   (: 'union' :)
          let $state := p:shift(99, $input, $state)         (: 'union' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(103, $input, $state)        (: '|' :)
          return $state
      let $state := p:lookahead1W(66, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-IntersectExceptExpr($input, $state)
      return p:parse-UnionExpr-1($input, $state)
};

(:~
 : Parse UnionExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-UnionExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-IntersectExceptExpr($input, $state)
  let $state := p:parse-UnionExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "UnionExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production MultiplicativeExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-MultiplicativeExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 18                                 (: '*' :)
    and $state[$p:l1] != 56                                 (: 'div' :)
    and $state[$p:l1] != 66                                 (: 'idiv' :)
    and $state[$p:l1] != 78) then                           (: 'mod' :)
      $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 18) then                   (: '*' :)
          let $state := p:shift(18, $input, $state)         (: '*' :)
          return $state
        else if ($state[$p:l1] = 56) then                   (: 'div' :)
          let $state := p:shift(56, $input, $state)         (: 'div' :)
          return $state
        else if ($state[$p:l1] = 66) then                   (: 'idiv' :)
          let $state := p:shift(66, $input, $state)         (: 'idiv' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(78, $input, $state)         (: 'mod' :)
          return $state
      let $state := p:lookahead1W(66, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-UnionExpr($input, $state)
      return p:parse-MultiplicativeExpr-1($input, $state)
};

(:~
 : Parse MultiplicativeExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-MultiplicativeExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-UnionExpr($input, $state)
  let $state := p:parse-MultiplicativeExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "MultiplicativeExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production AdditiveExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AdditiveExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 19                                 (: '+' :)
    and $state[$p:l1] != 21) then                           (: '-' :)
      $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 19) then                   (: '+' :)
          let $state := p:shift(19, $input, $state)         (: '+' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(21, $input, $state)         (: '-' :)
          return $state
      let $state := p:lookahead1W(66, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-MultiplicativeExpr($input, $state)
      return p:parse-AdditiveExpr-1($input, $state)
};

(:~
 : Parse AdditiveExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AdditiveExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-MultiplicativeExpr($input, $state)
  let $state := p:parse-AdditiveExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AdditiveExpr", $count, $begin, $end)
};

(:~
 : Parse RangeExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-RangeExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-AdditiveExpr($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 97) then                       (: 'to' :)
      let $state := p:shift(97, $input, $state)             (: 'to' :)
      let $state := p:lookahead1W(66, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-AdditiveExpr($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "RangeExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production StringConcatExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-StringConcatExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 104) then                          (: '||' :)
      $state
    else
      let $state := p:shift(104, $input, $state)            (: '||' :)
      let $state := p:lookahead1W(66, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-RangeExpr($input, $state)
      return p:parse-StringConcatExpr-1($input, $state)
};

(:~
 : Parse StringConcatExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-StringConcatExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-RangeExpr($input, $state)
  let $state := p:parse-StringConcatExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "StringConcatExpr", $count, $begin, $end)
};

(:~
 : Parse ComparisonExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ComparisonExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-StringConcatExpr($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 17                            (: ')' :)
         and $state[$p:l1] != 20                            (: ',' :)
         and $state[$p:l1] != 41                            (: ']' :)
         and $state[$p:l1] != 44                            (: 'and' :)
         and $state[$p:l1] != 85                            (: 'or' :)
         and $state[$p:l1] != 102) then                     (: '{' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 60                         (: 'eq' :)
              or $state[$p:l1] = 64                         (: 'ge' :)
              or $state[$p:l1] = 65                         (: 'gt' :)
              or $state[$p:l1] = 74                         (: 'le' :)
              or $state[$p:l1] = 76                         (: 'lt' :)
              or $state[$p:l1] = 81) then                   (: 'ne' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-ValueComp($input, $state)
          return $state
        else if ($state[$p:l1] = 31                         (: '<<' :)
              or $state[$p:l1] = 37                         (: '>>' :)
              or $state[$p:l1] = 72) then                   (: 'is' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-NodeComp($input, $state)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:whitespace($input, $state)
          let $state := p:parse-GeneralComp($input, $state)
          return $state
      let $state := p:lookahead1W(66, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-StringConcatExpr($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ComparisonExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production AndExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AndExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 44) then                           (: 'and' :)
      $state
    else
      let $state := p:shift(44, $input, $state)             (: 'and' :)
      let $state := p:lookahead1W(66, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ComparisonExpr($input, $state)
      return p:parse-AndExpr-1($input, $state)
};

(:~
 : Parse AndExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AndExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ComparisonExpr($input, $state)
  let $state := p:parse-AndExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AndExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production OrExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OrExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 85) then                           (: 'or' :)
      $state
    else
      let $state := p:shift(85, $input, $state)             (: 'or' :)
      let $state := p:lookahead1W(66, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-AndExpr($input, $state)
      return p:parse-OrExpr-1($input, $state)
};

(:~
 : Parse OrExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OrExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-AndExpr($input, $state)
  let $state := p:parse-OrExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "OrExpr", $count, $begin, $end)
};

(:~
 : Parse ExprSingle.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ExprSingle($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-OrExpr($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ExprSingle", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production Expr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Expr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 20) then                           (: ',' :)
      $state
    else
      let $state := p:shift(20, $input, $state)             (: ',' :)
      let $state := p:lookahead1W(66, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '+' | '-' | '.' |
                                                               '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ExprSingle($input, $state)
      return p:parse-Expr-1($input, $state)
};

(:~
 : Parse Expr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Expr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ExprSingle($input, $state)
  let $state := p:parse-Expr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "Expr", $count, $begin, $end)
};

(:~
 : Parse ParenthesizedExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ParenthesizedExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(68, $input, $state)           (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | ')' | '+' | '-' |
                                                               '.' | '..' | '/' | '//' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' | 'self' |
                                                               'text' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 17) then                      (: ')' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-Expr($input, $state)
      return $state
    else
      $state
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ParenthesizedExpr", $count, $begin, $end)
};

(:~
 : Parse VarName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-VarName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "VarName", $count, $begin, $end)
};

(:~
 : Parse VarRef.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-VarRef($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(14, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(25, $input, $state)           (: URIQualifiedName | QName^Token | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-VarName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "VarRef", $count, $begin, $end)
};

(:~
 : Parse NumericLiteral.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NumericLiteral($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 1) then                        (: IntegerLiteral :)
      let $state := p:shift(1, $input, $state)              (: IntegerLiteral :)
      return $state
    else if ($state[$p:l1] = 2) then                        (: DecimalLiteral :)
      let $state := p:shift(2, $input, $state)              (: DecimalLiteral :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(3, $input, $state)              (: DoubleLiteral :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NumericLiteral", $count, $begin, $end)
};

(:~
 : Parse Literal.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Literal($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 4) then                        (: StringLiteral :)
      let $state := p:shift(4, $input, $state)              (: StringLiteral :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-NumericLiteral($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Literal", $count, $begin, $end)
};

(:~
 : Parse PrimaryExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PrimaryExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] eq 14) then                           (: '$' :)
      let $state := p:lookahead2W(35, $input, $state)       (: IntegerLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               ('(' ':') :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 654                            (: '$' URIQualifiedName :)
          or $state[$p:lk] = 910) then                      (: '$' QName^Token :)
      let $state := p:parse-VarRef($input, $state)
      return $state
    else if ($state[$p:lk] = 142) then                      (: '$' IntegerLiteral :)
      let $state := p:parse-XProcInputOrdinal($input, $state)
      return $state
    else if ($state[$p:lk] = 15) then                       (: '(' :)
      let $state := p:parse-ParenthesizedExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 22) then                       (: '.' :)
      let $state := p:parse-ContextItemExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 7) then                        (: QName^Token :)
      let $state := p:parse-FunctionCall($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-Literal($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "PrimaryExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production PostfixExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PostfixExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(76, $input, $state)         (: S^WS | '!' | '!=' | '(' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | '<' | '<<' | '<=' | '=' | '=>' |
                                                               '>' | '>=' | '>>' | '[' | ']' | 'and' | 'cast' |
                                                               'castable' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' |
                                                               'mod' | 'ne' | 'or' | 'replace' | 'tee' | 'to' |
                                                               'treat' | 'union' | '{' | '|' | '||' | '→' | '⊤' :)
    return
      if ($state[$p:l1] != 15                               (: '(' :)
      and $state[$p:l1] != 40) then                         (: '[' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 40) then                 (: '[' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-Predicate($input, $state)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:whitespace($input, $state)
            let $state := p:parse-ArgumentList($input, $state)
            return $state
        return p:parse-PostfixExpr-1($input, $state)
};

(:~
 : Parse PostfixExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PostfixExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-PrimaryExpr($input, $state)
  let $state := p:parse-PostfixExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "PostfixExpr", $count, $begin, $end)
};

(:~
 : Parse StepExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-StepExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] eq 7) then                            (: QName^Token :)
      let $state := p:lookahead2W(76, $input, $state)       (: S^WS | '!' | '!=' | '(' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | '<' | '<<' | '<=' | '=' | '=>' |
                                                               '>' | '>=' | '>>' | '[' | ']' | 'and' | 'cast' |
                                                               'castable' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' |
                                                               'mod' | 'ne' | 'or' | 'replace' | 'tee' | 'to' |
                                                               'treat' | 'union' | '{' | '|' | '||' | '→' | '⊤' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 1                              (: IntegerLiteral :)
          or $state[$p:lk] = 2                              (: DecimalLiteral :)
          or $state[$p:lk] = 3                              (: DoubleLiteral :)
          or $state[$p:lk] = 4                              (: StringLiteral :)
          or $state[$p:lk] = 14                             (: '$' :)
          or $state[$p:lk] = 15                             (: '(' :)
          or $state[$p:lk] = 22                             (: '.' :)
          or $state[$p:lk] = 1927) then                     (: QName^Token '(' :)
      let $state := p:parse-PostfixExpr($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-AxisStep($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "StepExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production RelativePathExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-RelativePathExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 24                                 (: '/' :)
    and $state[$p:l1] != 25) then                           (: '//' :)
      $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 24) then                   (: '/' :)
          let $state := p:shift(24, $input, $state)         (: '/' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(25, $input, $state)         (: '//' :)
          return $state
      let $state := p:lookahead1W(62, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '.' | '..' | '@' |
                                                               'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' |
                                                               'comment' | 'descendant' | 'descendant-or-self' |
                                                               'document-node' | 'element' | 'following' |
                                                               'following-sibling' | 'namespace-node' | 'node' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'self' | 'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-StepExpr($input, $state)
      return p:parse-RelativePathExpr-1($input, $state)
};

(:~
 : Parse RelativePathExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-RelativePathExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-StepExpr($input, $state)
  let $state := p:parse-RelativePathExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "RelativePathExpr", $count, $begin, $end)
};

(:~
 : Parse XProcProjection.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcProjection($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 24) then                       (: '/' :)
      let $state := p:shift(24, $input, $state)             (: '/' :)
      let $state := p:lookahead1W(74, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '!' | '$' | '(' | ('(' ':') | ')' | ',' |
                                                               '.' | '..' | '=>' | '@' | ']' | 'ancestor' |
                                                               'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                                               'descendant' | 'descendant-or-self' | 'document-node' |
                                                               'element' | 'following' | 'following-sibling' |
                                                               'namespace-node' | 'node' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'replace' | 'self' | 'tee' | 'text' | '→' | '⊤' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 12                         (: '!' :)
              or $state[$p:l1] = 17                         (: ')' :)
              or $state[$p:l1] = 20                         (: ',' :)
              or $state[$p:l1] = 34                         (: '=>' :)
              or $state[$p:l1] = 41                         (: ']' :)
              or $state[$p:l1] = 91                         (: 'replace' :)
              or $state[$p:l1] = 94                         (: 'tee' :)
              or $state[$p:l1] = 106                        (: '→' :)
              or $state[$p:l1] = 108) then                  (: '⊤' :)
          $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:whitespace($input, $state)
          let $state := p:parse-RelativePathExpr($input, $state)
          return $state
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(25, $input, $state)             (: '//' :)
      let $state := p:lookahead1W(62, $input, $state)       (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '(' | ('(' ':') | '.' | '..' | '@' |
                                                               'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' |
                                                               'comment' | 'descendant' | 'descendant-or-self' |
                                                               'document-node' | 'element' | 'following' |
                                                               'following-sibling' | 'namespace-node' | 'node' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'self' | 'text' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-RelativePathExpr($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcProjection", $count, $begin, $end)
};

(:~
 : Parse XProcInputOrdinal.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcInputOrdinal($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(14, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(0, $input, $state)            (: IntegerLiteral | S^WS | ('(' ':') :)
  let $state := p:shift(1, $input, $state)                  (: IntegerLiteral :)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcInputOrdinal", $count, $begin, $end)
};

(:~
 : Parse XProcPortRef.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcPortRef($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(14, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(3, $input, $state)            (: QName^Token | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-QName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcPortRef", $count, $begin, $end)
};

(:~
 : Parse XProcPortInput.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcPortInput($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] eq 14) then                           (: '$' :)
      let $state := p:lookahead2W(23, $input, $state)       (: IntegerLiteral | QName^Token | S^WS | ('(' ':') :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 910) then                      (: '$' QName^Token :)
      let $state := p:parse-XProcPortRef($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-XProcInputOrdinal($input, $state)
      return $state
  let $state := p:lookahead1W(55, $input, $state)           (: S^WS | '!' | ('(' ':') | ')' | ',' | '/' | '//' | '=>' |
                                                               ']' | 'replace' | 'tee' | '→' | '⊤' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 24                             (: '/' :)
          or $state[$p:l1] = 25) then                       (: '//' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcProjection($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcPortInput", $count, $begin, $end)
};

(:~
 : Parse XProcSequenceItem.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcSequenceItem($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 4) then                        (: StringLiteral :)
      let $state := p:parse-XProcURILiteral($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-XProcPortInput($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcSequenceItem", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production XProcSequenceLiteral (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcSequenceLiteral-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(28, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 20) then                         (: ',' :)
        $state
      else
        let $state := p:shift(20, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(24, $input, $state)     (: StringLiteral | S^WS | '$' | ('(' ':') :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-XProcSequenceItem($input, $state)
        return p:parse-XProcSequenceLiteral-1($input, $state)
};

(:~
 : Parse XProcSequenceLiteral.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcSequenceLiteral($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 15) then                       (: '(' :)
      let $state := p:shift(15, $input, $state)             (: '(' :)
      let $state := p:lookahead1W(24, $input, $state)       (: StringLiteral | S^WS | '$' | ('(' ':') :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcSequenceItem($input, $state)
      let $state := p:parse-XProcSequenceLiteral-1($input, $state)
      let $state := p:shift(17, $input, $state)             (: ')' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-XProcSequenceItem($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcSequenceLiteral", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production XProcStepChain (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcStepChain-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(48, $input, $state)         (: S^WS | '!' | ('(' ':') | '=>' | 'replace' | 'tee' | '→' |
                                                               '⊤' :)
    let $state := p:whitespace($input, $state)
    let $state := p:parse-XProcStepChainItem($input, $state)
    let $state := p:lookahead1W(61, $input, $state)         (: StringLiteral | QName^Token | S^WS | EOF | '!' | '$' |
                                                               '(' | ('(' ':') | '=>' | '>>' | '[' | 'else' | 'if' |
                                                               'let' | 'replace' | 'tee' | '{' | '}' | '→' | '≫' | '⊤' :)
    return
      if ($state[$p:l1] != 12                               (: '!' :)
      and $state[$p:l1] != 34                               (: '=>' :)
      and $state[$p:l1] != 91                               (: 'replace' :)
      and $state[$p:l1] != 94                               (: 'tee' :)
      and $state[$p:l1] != 106                              (: '→' :)
      and $state[$p:l1] != 108) then                        (: '⊤' :)
        $state
      else
        p:parse-XProcStepChain-1($input, $state)
};

(:~
 : Parse the 2nd loop of production XProcStepChain (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcStepChain-2($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(61, $input, $state)         (: StringLiteral | QName^Token | S^WS | EOF | '!' | '$' |
                                                               '(' | ('(' ':') | '=>' | '>>' | '[' | 'else' | 'if' |
                                                               'let' | 'replace' | 'tee' | '{' | '}' | '→' | '≫' | '⊤' :)
    return
      if ($state[$p:l1] != 12                               (: '!' :)
      and $state[$p:l1] != 34                               (: '=>' :)
      and $state[$p:l1] != 91                               (: 'replace' :)
      and $state[$p:l1] != 94                               (: 'tee' :)
      and $state[$p:l1] != 106                              (: '→' :)
      and $state[$p:l1] != 108) then                        (: '⊤' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state := p:parse-XProcStepChainItem($input, $state)
        return p:parse-XProcStepChain-2($input, $state)
};

(:~
 : Parse XProcStepChain.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcStepChain($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 4                              (: StringLiteral :)
          or $state[$p:l1] = 14                             (: '$' :)
          or $state[$p:l1] = 15) then                       (: '(' :)
      let $state := p:parse-XProcSequenceLiteral($input, $state)
      let $state := p:parse-XProcStepChain-1($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 102) then                  (: '{' :)
          let $state := p:parse-XProcBlockStatement($input, $state)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:parse-XProcStepInvocation($input, $state)
          return $state
      let $state := p:parse-XProcStepChain-2($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcStepChain", $count, $begin, $end)
};

(:~
 : Parse XProcFlowStatement.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcFlowStatement($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 67) then                       (: 'if' :)
      let $state := p:parse-XProcIfStatement($input, $state)
      return $state
    else if ($state[$p:l1] = 75) then                       (: 'let' :)
      let $state := p:parse-XProcLetStatement($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-XProcStepChain($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 37                         (: '>>' :)
              or $state[$p:l1] = 107) then                  (: '≫' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-XProcOutputBinding($input, $state)
          return $state
        else
          $state
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcFlowStatement", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production XProcFlow (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcFlow-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:whitespace($input, $state)
    let $state := p:parse-XProcFlowStatement($input, $state)
    let $state := p:lookahead1W(52, $input, $state)         (: StringLiteral | QName^Token | S^WS | EOF | '$' | '(' |
                                                               ('(' ':') | '[' | 'if' | 'let' | '{' | '}' :)
    return
      if ($state[$p:l1] = 10                                (: EOF :)
       or $state[$p:l1] = 105) then                         (: '}' :)
        $state
      else
        p:parse-XProcFlow-1($input, $state)
};

(:~
 : Parse XProcFlow.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcFlow($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-XProcFlow-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcFlow", $count, $begin, $end)
};

(:~
 : Parse XProcStepDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcStepDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'step' :)
  let $state := p:lookahead1W(3, $input, $state)            (: QName^Token | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-FunctionName($input, $state)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(26, $input, $state)           (: S^WS | '$' | ('(' ':') | ')' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 14) then                       (: '$' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcParamList($input, $state)
      return $state
    else
      $state
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $state := p:lookahead1W(41, $input, $state)           (: S^WS | ('(' ':') | ';' | 'inputs' | 'outputs' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 69) then                       (: 'inputs' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcInputs($input, $state)
      return $state
    else
      $state
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 86) then                       (: 'outputs' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcOutputs($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcStepDecl", $count, $begin, $end)
};

(:~
 : Parse XProcOptionDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcOptionDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(84, $input, $state)                 (: 'option' :)
  let $state := p:lookahead1W(4, $input, $state)            (: S^WS | '$' | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcParam($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcOptionDecl", $count, $begin, $end)
};

(:~
 : Parse XProcOutputs.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcOutputs($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(86, $input, $state)                 (: 'outputs' :)
  let $state := p:lookahead1W(4, $input, $state)            (: S^WS | '$' | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcParamList($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcOutputs", $count, $begin, $end)
};

(:~
 : Parse OccurrenceIndicator.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OccurrenceIndicator($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 38) then                       (: '?' :)
      let $state := p:shift(38, $input, $state)             (: '?' :)
      return $state
    else if ($state[$p:l1] = 18) then                       (: '*' :)
      let $state := p:shift(18, $input, $state)             (: '*' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(19, $input, $state)             (: '+' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "OccurrenceIndicator", $count, $begin, $end)
};

(:~
 : Parse ParenthesizedItemType.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ParenthesizedItemType($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(57, $input, $state)           (: URIQualifiedName | QName^Token | S^WS | '(' | ('(' ':') |
                                                               'array' | 'attribute' | 'comment' | 'document-node' |
                                                               'element' | 'item' | 'map' | 'namespace-node' | 'node' |
                                                               'processing-instruction' | 'text' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ItemType($input, $state)
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ParenthesizedItemType", $count, $begin, $end)
};

(:~
 : Parse TypedArrayTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TypedArrayTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(45, $input, $state)                 (: 'array' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(57, $input, $state)           (: URIQualifiedName | QName^Token | S^WS | '(' | ('(' ':') |
                                                               'array' | 'attribute' | 'comment' | 'document-node' |
                                                               'element' | 'item' | 'map' | 'namespace-node' | 'node' |
                                                               'processing-instruction' | 'text' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-SequenceType($input, $state)
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "TypedArrayTest", $count, $begin, $end)
};

(:~
 : Parse AnyArrayTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AnyArrayTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(45, $input, $state)                 (: 'array' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(7, $input, $state)            (: S^WS | ('(' ':') | '*' :)
  let $state := p:shift(18, $input, $state)                 (: '*' :)
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "AnyArrayTest", $count, $begin, $end)
};

(:~
 : Parse ArrayTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ArrayTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] eq 45) then                           (: 'array' :)
      let $state := p:lookahead2W(5, $input, $state)        (: S^WS | '(' | ('(' ':') :)
      let $state :=
        if ($state[$p:lk] eq 1965) then                     (: 'array' '(' :)
          let $state := p:lookahead3W(59, $input, $state)   (: URIQualifiedName | QName^Token | S^WS | '(' | ('(' ':') |
                                                               '*' | 'array' | 'attribute' | 'comment' |
                                                               'document-node' | 'element' | 'item' | 'map' |
                                                               'namespace-node' | 'node' | 'processing-instruction' |
                                                               'text' :)
          return $state
        else
          $state
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 296877) then                   (: 'array' '(' '*' :)
      let $state := p:parse-AnyArrayTest($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-TypedArrayTest($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ArrayTest", $count, $begin, $end)
};

(:~
 : Parse AtomicOrUnionType.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AtomicOrUnionType($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AtomicOrUnionType", $count, $begin, $end)
};

(:~
 : Parse TypedMapTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TypedMapTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(77, $input, $state)                 (: 'map' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(25, $input, $state)           (: URIQualifiedName | QName^Token | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-AtomicOrUnionType($input, $state)
  let $state := p:lookahead1W(8, $input, $state)            (: S^WS | ('(' ':') | ',' :)
  let $state := p:shift(20, $input, $state)                 (: ',' :)
  let $state := p:lookahead1W(57, $input, $state)           (: URIQualifiedName | QName^Token | S^WS | '(' | ('(' ':') |
                                                               'array' | 'attribute' | 'comment' | 'document-node' |
                                                               'element' | 'item' | 'map' | 'namespace-node' | 'node' |
                                                               'processing-instruction' | 'text' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-SequenceType($input, $state)
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "TypedMapTest", $count, $begin, $end)
};

(:~
 : Parse AnyMapTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AnyMapTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(77, $input, $state)                 (: 'map' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(7, $input, $state)            (: S^WS | ('(' ':') | '*' :)
  let $state := p:shift(18, $input, $state)                 (: '*' :)
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "AnyMapTest", $count, $begin, $end)
};

(:~
 : Parse MapTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-MapTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] eq 77) then                           (: 'map' :)
      let $state := p:lookahead2W(5, $input, $state)        (: S^WS | '(' | ('(' ':') :)
      let $state :=
        if ($state[$p:lk] eq 1997) then                     (: 'map' '(' :)
          let $state := p:lookahead3W(39, $input, $state)   (: URIQualifiedName | QName^Token | S^WS | ('(' ':') | '*' :)
          return $state
        else
          $state
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 296909) then                   (: 'map' '(' '*' :)
      let $state := p:parse-AnyMapTest($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-TypedMapTest($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "MapTest", $count, $begin, $end)
};

(:~
 : Parse AnyKindTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AnyKindTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(82, $input, $state)                 (: 'node' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "AnyKindTest", $count, $begin, $end)
};

(:~
 : Parse NamespaceNodeTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NamespaceNodeTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(80, $input, $state)                 (: 'namespace-node' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "NamespaceNodeTest", $count, $begin, $end)
};

(:~
 : Parse TextTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TextTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(95, $input, $state)                 (: 'text' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "TextTest", $count, $begin, $end)
};

(:~
 : Parse CommentTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CommentTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(51, $input, $state)                 (: 'comment' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "CommentTest", $count, $begin, $end)
};

(:~
 : Parse PITest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PITest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(90, $input, $state)                 (: 'processing-instruction' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(36, $input, $state)           (: StringLiteral | NCName^Token | S^WS | ('(' ':') | ')' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 17) then                      (: ')' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 6) then                    (: NCName^Token :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-NCName($input, $state)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(4, $input, $state)          (: StringLiteral :)
          return $state
      return $state
    else
      $state
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "PITest", $count, $begin, $end)
};

(:~
 : Parse AttributeName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AttributeName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AttributeName", $count, $begin, $end)
};

(:~
 : Parse AttribNameOrWildcard.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AttribNameOrWildcard($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 18) then                       (: '*' :)
      let $state := p:shift(18, $input, $state)             (: '*' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-AttributeName($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "AttribNameOrWildcard", $count, $begin, $end)
};

(:~
 : Parse AttributeTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AttributeTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(47, $input, $state)                 (: 'attribute' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(45, $input, $state)           (: URIQualifiedName | QName^Token | S^WS | ('(' ':') | ')' |
                                                               '*' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 17) then                      (: ')' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-AttribNameOrWildcard($input, $state)
      let $state := p:lookahead1W(28, $input, $state)       (: S^WS | ('(' ':') | ')' | ',' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 20) then                   (: ',' :)
          let $state := p:shift(20, $input, $state)         (: ',' :)
          let $state := p:lookahead1W(25, $input, $state)   (: URIQualifiedName | QName^Token | S^WS | ('(' ':') :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-TypeName($input, $state)
          return $state
        else
          $state
      return $state
    else
      $state
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "AttributeTest", $count, $begin, $end)
};

(:~
 : Parse TypeName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TypeName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "TypeName", $count, $begin, $end)
};

(:~
 : Parse EQName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-EQName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: QName^Token :)
      let $state := p:parse-QName($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(5, $input, $state)              (: URIQualifiedName :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "EQName", $count, $begin, $end)
};

(:~
 : Parse ElementName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ElementName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ElementName", $count, $begin, $end)
};

(:~
 : Parse ElementNameOrWildcard.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ElementNameOrWildcard($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 18) then                       (: '*' :)
      let $state := p:shift(18, $input, $state)             (: '*' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-ElementName($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ElementNameOrWildcard", $count, $begin, $end)
};

(:~
 : Parse ElementTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ElementTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(58, $input, $state)                 (: 'element' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(45, $input, $state)           (: URIQualifiedName | QName^Token | S^WS | ('(' ':') | ')' |
                                                               '*' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 17) then                      (: ')' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ElementNameOrWildcard($input, $state)
      let $state := p:lookahead1W(28, $input, $state)       (: S^WS | ('(' ':') | ')' | ',' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 20) then                   (: ',' :)
          let $state := p:shift(20, $input, $state)         (: ',' :)
          let $state := p:lookahead1W(25, $input, $state)   (: URIQualifiedName | QName^Token | S^WS | ('(' ':') :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-TypeName($input, $state)
          let $state := p:lookahead1W(29, $input, $state)   (: S^WS | ('(' ':') | ')' | '?' :)
          let $state :=
            if ($state[$p:error]) then
              $state
            else if ($state[$p:l1] = 38) then               (: '?' :)
              let $state := p:shift(38, $input, $state)     (: '?' :)
              return $state
            else
              $state
          return $state
        else
          $state
      return $state
    else
      $state
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ElementTest", $count, $begin, $end)
};

(:~
 : Parse DocumentTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DocumentTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(57, $input, $state)                 (: 'document-node' :)
  let $state := p:lookahead1W(5, $input, $state)            (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(15, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(30, $input, $state)           (: S^WS | ('(' ':') | ')' | 'element' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 58) then                       (: 'element' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ElementTest($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(6, $input, $state)            (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(17, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "DocumentTest", $count, $begin, $end)
};

(:~
 : Parse KindTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-KindTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 57) then                       (: 'document-node' :)
      let $state := p:parse-DocumentTest($input, $state)
      return $state
    else if ($state[$p:l1] = 58) then                       (: 'element' :)
      let $state := p:parse-ElementTest($input, $state)
      return $state
    else if ($state[$p:l1] = 47) then                       (: 'attribute' :)
      let $state := p:parse-AttributeTest($input, $state)
      return $state
    else if ($state[$p:l1] = 90) then                       (: 'processing-instruction' :)
      let $state := p:parse-PITest($input, $state)
      return $state
    else if ($state[$p:l1] = 51) then                       (: 'comment' :)
      let $state := p:parse-CommentTest($input, $state)
      return $state
    else if ($state[$p:l1] = 95) then                       (: 'text' :)
      let $state := p:parse-TextTest($input, $state)
      return $state
    else if ($state[$p:l1] = 80) then                       (: 'namespace-node' :)
      let $state := p:parse-NamespaceNodeTest($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-AnyKindTest($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "KindTest", $count, $begin, $end)
};

(:~
 : Parse ItemType.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ItemType($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 73) then                       (: 'item' :)
      let $state := p:shift(73, $input, $state)             (: 'item' :)
      let $state := p:lookahead1W(5, $input, $state)        (: S^WS | '(' | ('(' ':') :)
      let $state := p:shift(15, $input, $state)             (: '(' :)
      let $state := p:lookahead1W(6, $input, $state)        (: S^WS | ('(' ':') | ')' :)
      let $state := p:shift(17, $input, $state)             (: ')' :)
      return $state
    else if ($state[$p:l1] = 77) then                       (: 'map' :)
      let $state := p:parse-MapTest($input, $state)
      return $state
    else if ($state[$p:l1] = 45) then                       (: 'array' :)
      let $state := p:parse-ArrayTest($input, $state)
      return $state
    else if ($state[$p:l1] = 5                              (: URIQualifiedName :)
          or $state[$p:l1] = 7) then                        (: QName^Token :)
      let $state := p:parse-AtomicOrUnionType($input, $state)
      return $state
    else if ($state[$p:l1] = 15) then                       (: '(' :)
      let $state := p:parse-ParenthesizedItemType($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-KindTest($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ItemType", $count, $begin, $end)
};

(:~
 : Parse SequenceType.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SequenceType($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ItemType($input, $state)
  let $state := p:lookahead1W(73, $input, $state)           (: S^WS | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                               ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | '?' | ']' | 'and' | 'div' | 'eq' | 'except' |
                                                               'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                                               'le' | 'lt' | 'mod' | 'ne' | 'or' | 'outputs' | 'to' |
                                                               'union' | '{' | '|' | '||' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 18                             (: '*' :)
          or $state[$p:l1] = 19                             (: '+' :)
          or $state[$p:l1] = 38) then                       (: '?' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-OccurrenceIndicator($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "SequenceType", $count, $begin, $end)
};

(:~
 : Parse XProcTypeDeclaration.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcTypeDeclaration($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(46, $input, $state)                 (: 'as' :)
  let $state := p:lookahead1W(57, $input, $state)           (: URIQualifiedName | QName^Token | S^WS | '(' | ('(' ':') |
                                                               'array' | 'attribute' | 'comment' | 'document-node' |
                                                               'element' | 'item' | 'map' | 'namespace-node' | 'node' |
                                                               'processing-instruction' | 'text' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-SequenceType($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcTypeDeclaration", $count, $begin, $end)
};

(:~
 : Parse FunctionName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-FunctionName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(7, $input, $state)                  (: QName^Token :)
  let $end := $state[$p:e0]
  return p:reduce($state, "FunctionName", $count, $begin, $end)
};

(:~
 : Parse QName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-QName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-FunctionName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "QName", $count, $begin, $end)
};

(:~
 : Parse XProcParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcParam($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(14, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(3, $input, $state)            (: QName^Token | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-QName($input, $state)
  let $state := p:lookahead1W(47, $input, $state)           (: S^WS | ('(' ':') | ')' | ',' | ';' | 'as' | 'outputs' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 46) then                       (: 'as' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcTypeDeclaration($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcParam", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production XProcParamList (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcParamList-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(46, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' | ';' | 'outputs' :)
    return
      if ($state[$p:l1] != 20) then                         (: ',' :)
        $state
      else
        let $state := p:shift(20, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(4, $input, $state)      (: S^WS | '$' | ('(' ':') :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-XProcParam($input, $state)
        return p:parse-XProcParamList-1($input, $state)
};

(:~
 : Parse XProcParamList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcParamList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-XProcParam($input, $state)
  let $state := p:parse-XProcParamList-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcParamList", $count, $begin, $end)
};

(:~
 : Parse XProcInputs.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcInputs($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(69, $input, $state)                 (: 'inputs' :)
  let $state := p:lookahead1W(4, $input, $state)            (: S^WS | '$' | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcParamList($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcInputs", $count, $begin, $end)
};

(:~
 : Parse XProcImport.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcImport($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(68, $input, $state)                 (: 'import' :)
  let $state := p:lookahead1W(1, $input, $state)            (: StringLiteral | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcURILiteral($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcImport", $count, $begin, $end)
};

(:~
 : Parse NCName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NCName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(6, $input, $state)                  (: NCName^Token :)
  let $end := $state[$p:e0]
  return p:reduce($state, "NCName", $count, $begin, $end)
};

(:~
 : Parse XProcNamespaceDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcNamespaceDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(52, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(17, $input, $state)           (: S^WS | ('(' ':') | 'namespace' :)
  let $state := p:shift(79, $input, $state)                 (: 'namespace' :)
  let $state := p:lookahead1W(2, $input, $state)            (: NCName^Token | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-NCName($input, $state)
  let $state := p:lookahead1W(12, $input, $state)           (: S^WS | ('(' ':') | '=' :)
  let $state := p:shift(33, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(1, $input, $state)            (: StringLiteral | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcURILiteral($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcNamespaceDecl", $count, $begin, $end)
};

(:~
 : Parse XProcURILiteral.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcURILiteral($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(4, $input, $state)                  (: StringLiteral :)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcURILiteral", $count, $begin, $end)
};

(:~
 : Parse XProcDefaultNamespaceDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcDefaultNamespaceDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(52, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(15, $input, $state)           (: S^WS | ('(' ':') | 'default' :)
  let $state := p:shift(53, $input, $state)                 (: 'default' :)
  let $state := p:lookahead1W(17, $input, $state)           (: S^WS | ('(' ':') | 'namespace' :)
  let $state := p:shift(79, $input, $state)                 (: 'namespace' :)
  let $state := p:lookahead1W(1, $input, $state)            (: StringLiteral | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcURILiteral($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcDefaultNamespaceDecl", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production XProcProlog (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcProlog-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(58, $input, $state)         (: StringLiteral | QName^Token | S^WS | EOF | '$' | '(' |
                                                               ('(' ':') | '[' | 'declare' | 'if' | 'import' |
                                                               'inputs' | 'let' | 'option' | 'outputs' | 'step' | '{' :)
    return
      if ($state[$p:l1] != 52                               (: 'declare' :)
      and $state[$p:l1] != 68) then                         (: 'import' :)
        $state
      else
        let $state :=
          if ($state[$p:l1] eq 52) then                     (: 'declare' :)
            let $state := p:lookahead2W(34, $input, $state) (: S^WS | ('(' ':') | 'default' | 'namespace' :)
            return $state
          else
            ($state[$p:l1], subsequence($state, $p:lk + 1))
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:lk] = 6836) then               (: 'declare' 'default' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-XProcDefaultNamespaceDecl($input, $state)
            return $state
          else if ($state[$p:lk] = 10164) then              (: 'declare' 'namespace' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-XProcNamespaceDecl($input, $state)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:whitespace($input, $state)
            let $state := p:parse-XProcImport($input, $state)
            return $state
        let $state := p:lookahead1W(11, $input, $state)     (: S^WS | ('(' ':') | ';' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-XProcSeparator($input, $state)
        return p:parse-XProcProlog-1($input, $state)
};

(:~
 : Parse the 2nd loop of production XProcProlog (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcProlog-2($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(53, $input, $state)         (: StringLiteral | QName^Token | S^WS | EOF | '$' | '(' |
                                                               ('(' ':') | '[' | 'if' | 'let' | 'option' | 'step' | '{' :)
    return
      if ($state[$p:l1] != 84) then                         (: 'option' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state := p:parse-XProcOptionDecl($input, $state)
        let $state := p:lookahead1W(11, $input, $state)     (: S^WS | ('(' ':') | ';' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-XProcSeparator($input, $state)
        return p:parse-XProcProlog-2($input, $state)
};

(:~
 : Parse the 3rd loop of production XProcProlog (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcProlog-3($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(51, $input, $state)         (: StringLiteral | QName^Token | S^WS | EOF | '$' | '(' |
                                                               ('(' ':') | '[' | 'if' | 'let' | 'step' | '{' :)
    return
      if ($state[$p:l1] != 93) then                         (: 'step' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state := p:parse-XProcStepDecl($input, $state)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-XProcSeparator($input, $state)
        return p:parse-XProcProlog-3($input, $state)
};

(:~
 : Parse XProcProlog.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcProlog($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-XProcProlog-1($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 69) then                       (: 'inputs' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcInputs($input, $state)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcSeparator($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(56, $input, $state)           (: StringLiteral | QName^Token | S^WS | EOF | '$' | '(' |
                                                               ('(' ':') | '[' | 'if' | 'let' | 'option' | 'outputs' |
                                                               'step' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 86) then                       (: 'outputs' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcOutputs($input, $state)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcSeparator($input, $state)
      return $state
    else
      $state
  let $state := p:parse-XProcProlog-2($input, $state)
  let $state := p:parse-XProcProlog-3($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcProlog", $count, $begin, $end)
};

(:~
 : Parse XProcSeparator.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcSeparator($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(29, $input, $state)                 (: ';' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcSeparator", $count, $begin, $end)
};

(:~
 : Parse XProcVersionDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcVersionDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(101, $input, $state)                (: 'xproc' :)
  let $state := p:lookahead1W(20, $input, $state)           (: S^WS | ('(' ':') | 'version' :)
  let $state := p:shift(100, $input, $state)                (: 'version' :)
  let $state := p:lookahead1W(12, $input, $state)           (: S^WS | ('(' ':') | '=' :)
  let $state := p:shift(33, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(1, $input, $state)            (: StringLiteral | S^WS | ('(' ':') :)
  let $state := p:shift(4, $input, $state)                  (: StringLiteral :)
  let $state := p:lookahead1W(11, $input, $state)           (: S^WS | ('(' ':') | ';' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcSeparator($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcVersionDecl", $count, $begin, $end)
};

(:~
 : Parse XProcModule.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProcModule($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 101) then                      (: 'xproc' :)
      let $state := p:parse-XProcVersionDecl($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(58, $input, $state)           (: StringLiteral | QName^Token | S^WS | EOF | '$' | '(' |
                                                               ('(' ':') | '[' | 'declare' | 'if' | 'import' |
                                                               'inputs' | 'let' | 'option' | 'outputs' | 'step' | '{' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcProlog($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 10) then                      (: EOF :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-XProcFlow($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "XProcModule", $count, $begin, $end)
};

(:~
 : Parse XProc.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XProc($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:lookahead1W(60, $input, $state)           (: StringLiteral | QName^Token | S^WS | EOF | '$' | '(' |
                                                               ('(' ':') | '[' | 'declare' | 'if' | 'import' |
                                                               'inputs' | 'let' | 'option' | 'outputs' | 'step' |
                                                               'xproc' | '{' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-XProcModule($input, $state)
  let $state := p:shift(10, $input, $state)                 (: EOF :)
  let $end := $state[$p:e0]
  return p:reduce($state, "XProc", $count, $begin, $end)
};

(:~
 : Create a textual error message from a parsing error.
 :
 : @param $input the input string.
 : @param $error the parsing error descriptor.
 : @return the error message.
 :)
declare function p:error-message($input as xs:string, $error as element(error)) as xs:string
{
  let $begin := xs:integer($error/@b)
  let $context := string-to-codepoints(substring($input, 1, $begin - 1))
  let $linefeeds := index-of($context, 10)
  let $line := count($linefeeds) + 1
  let $column := ($begin - $linefeeds[last()], $begin)[1]
  return
    if ($error/@o) then
      concat
      (
        "syntax error, found ", $p:TOKEN[$error/@o + 1], "&#10;",
        "while expecting ", $p:TOKEN[$error/@x + 1], "&#10;",
        "at line ", string($line), ", column ", string($column), "&#10;",
        "...", substring($input, $begin, 32), "..."
      )
    else
      let $expected := p:expected-token-set($error/@s)
      return
        concat
        (
          "lexical analysis failed&#10;",
          "while expecting ",
          "["[exists($expected[2])],
          string-join($expected, ", "),
          "]"[exists($expected[2])],
          "&#10;",
          if ($error/@e = $begin) then
            ""
          else
            concat("after successfully scanning ", string($error/@e - $begin), " characters "),
          "at line ", string($line), ", column ", string($column), "&#10;",
          "...", substring($input, $begin, 32), "..."
        )
};

(:~
 : Shift one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : parser state.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:shift($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] = $code) then
  (
    subsequence($state, $p:l1, $p:e3 - $p:l1 + 1),
    0,
    $state[$p:e3],
    subsequence($state, $p:e3),
    let $begin := $state[$p:e0]
    let $end := $state[$p:b1]
    where $begin ne $end
    return
      text
      {
        substring($input, $begin, $end - $begin)
      },
    let $token := $p:TOKEN[1 + $state[$p:l1]]
    let $name := if (starts-with($token, "'")) then "TOKEN" else $token
    let $begin := $state[$p:b1]
    let $end := $state[$p:e1]
    return
      element {$name}
      {
        substring($input, $begin, $end - $begin)
      }
  )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      attribute b {$state[$p:b1]},
      attribute e {$state[$p:e1]},
      if ($state[$p:l1] < 0) then
        attribute s {- $state[$p:l1]}
      else
        (attribute o {$state[$p:l1]}, attribute x {$code})
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Shift one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : parser state. In contrast to p:shift, do not create any output.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:shiftT($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] = $code) then
  (
    subsequence($state, $p:l1, $p:e3 - $p:l1 + 1),
    0,
    $state[$p:e3],
    subsequence($state, $p:e3)
  )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      attribute b {$state[$p:b1]},
      attribute e {$state[$p:e1]},
      if ($state[$p:l1] < 0) then
        attribute s {- $state[$p:l1]}
      else
        (attribute o {$state[$p:l1]}, attribute x {$code})
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Consume whitespace.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:whitespace($input as xs:string,
                              $state as item()+) as item()+
{
  if ($state[$p:e0] = $state[$p:b1]) then
    $state
  else
    let $begin := $state[$p:e0]
    let $end := $state[$p:b1]
    return
    (
      0,
      $state[$p:b0],
      $end,
      subsequence($state, $p:e0 + 1),
      text
      {
        substring($input, $begin, $end - $begin)
      }
    )
};

(:~
 : Use p:match to fetch the next token, but skip any leading
 : whitespace.
 :
 : @param $input the input string.
 : @param $begin the index where to start.
 : @param $token-set the valid token set id.
 : @return a sequence of three values: the token code of the result
 : token, with input string positions of token begin and end.
 :)
declare function p:matchW($input as xs:string,
                          $begin as xs:integer,
                          $token-set as xs:integer) as xs:integer+
{
  let $match := p:match($input, $begin, $token-set)
  return
    if ($match[1] = 8) then                                 (: S^WS :)
      p:matchW($input, $match[3], $token-set)
    else if ($match[1] = 16) then                           (: ('(' ':') :)
      let $state := p:try-Whitespace($input, (0, 0, 0, $match, 0, $match[3], 0, 0, 0, 0, false()))
      return p:matchW($input, $state[$p:e0], $token-set)
    else
      $match
};

(:~
 : Lookahead one token on level 1 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead1W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] != 0) then
    $state
  else
    let $match := p:matchW($input, $state[$p:b1], $set)
    return
    (
      $match[1],
      subsequence($state, $p:lk + 1, $p:l1 - $p:lk - 1),
      $match,
      0, $match[3], 0,
      subsequence($state, $p:e2 + 1)
    )
};

(:~
 : Lookahead one token on level 2 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead2W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l2] != 0) then
      subsequence($state, $p:l2, $p:e2 - $p:l2 + 1)
    else
      p:matchW($input, $state[$p:b2], $set)
  return
  (
    $match[1] * 128 + $state[$p:l1],
    subsequence($state, $p:lk + 1, $p:l2 - $p:lk - 1),
    $match,
    0, $match[3], 0,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Lookahead one token on level 3 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead3W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l3] != 0) then
      subsequence($state, $p:l3, $p:e3 - $p:l3 + 1)
    else
      p:matchW($input, $state[$p:b3], $set)
  return
  (
    $match[1] * 16384 + $state[$p:lk],
    subsequence($state, $p:lk + 1, $p:l3 - $p:lk - 1),
    $match,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Lookahead one token on level 1.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead1($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] != 0) then
    $state
  else
    let $match := p:match($input, $state[$p:b1], $set)
    return
    (
      $match[1],
      subsequence($state, $p:lk + 1, $p:l1 - $p:lk - 1),
      $match,
      0, $match[3], 0,
      subsequence($state, $p:e2 + 1)
    )
};

(:~
 : Reduce the result stack, creating a nonterminal element. Pop
 : $count elements off the stack, wrap them in a new element
 : named $name, and push the new element.
 :
 : @param $state the parser state.
 : @param $name the name of the result node.
 : @param $count the number of child nodes.
 : @param $begin the input index where the nonterminal begins.
 : @param $end the input index where the nonterminal ends.
 : @return the updated parser state.
 :)
declare function p:reduce($state as item()+, $name as xs:string, $count as xs:integer, $begin as xs:integer, $end as xs:integer) as item()+
{
  subsequence($state, 1, $count),
  element {$name}
  {
    subsequence($state, $count + 1)
  }
};

(:~
 : Parse start symbol XProc from given string.
 :
 : @param $s the string to be parsed.
 : @return the result as generated by parser actions.
 :)
declare function p:parse-XProc($s as xs:string) as item()*
{
  let $state := p:parse-XProc($s, (0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, false()))
  let $error := $state[$p:error]
  return
    if ($error) then
      element ERROR {$error/@*, p:error-message($s, $error)}
    else
      subsequence($state, $p:result)
};

(: End :)
